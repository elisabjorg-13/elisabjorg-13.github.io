{"ast":null,"code":"\"use client\";\n\n// src/use-accordion.ts\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport React, { useCallback } from \"react\";\nimport { useTreeState } from \"@react-stately/tree\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { accordion } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useState } from \"react\";\nimport { useReactAriaAccordion } from \"@nextui-org/use-aria-accordion\";\nfunction useAccordion(props) {\n  const {\n    ref,\n    as,\n    children,\n    className,\n    items,\n    variant,\n    motionProps,\n    expandedKeys,\n    disabledKeys,\n    selectedKeys,\n    defaultExpandedKeys,\n    selectionMode = \"single\",\n    selectionBehavior = \"toggle\",\n    keepContentMounted = false,\n    disallowEmptySelection,\n    defaultSelectedKeys,\n    onExpandedChange,\n    onSelectionChange,\n    dividerProps = {},\n    isCompact = false,\n    isDisabled = false,\n    showDivider = true,\n    hideIndicator = false,\n    disableAnimation = false,\n    disableIndicatorAnimation = false,\n    itemClasses,\n    ...otherProps\n  } = props;\n  const [focusedKey, setFocusedKey] = useState(null);\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const classNames = useMemo(() => accordion({\n    variant,\n    className\n  }), [variant, className]);\n  const treeChildren = useMemo(() => {\n    let treeChildren2 = [];\n    React.Children.map(children, child => {\n      var _a;\n      if (React.isValidElement(child) && typeof ((_a = child.props) == null ? void 0 : _a.children) !== \"string\") {\n        const clonedChild = React.cloneElement(child, {\n          hasChildItems: false\n        });\n        treeChildren2.push(clonedChild);\n      } else {\n        treeChildren2.push(child);\n      }\n    });\n    return treeChildren2;\n  }, [children]);\n  const commonProps = {\n    children: treeChildren,\n    items\n  };\n  const expandableProps = {\n    expandedKeys,\n    defaultExpandedKeys,\n    onExpandedChange\n  };\n  const treeProps = {\n    disabledKeys,\n    selectedKeys,\n    selectionMode,\n    selectionBehavior,\n    disallowEmptySelection,\n    defaultSelectedKeys: defaultSelectedKeys != null ? defaultSelectedKeys : defaultExpandedKeys,\n    onSelectionChange,\n    ...commonProps,\n    ...expandableProps\n  };\n  const state = useTreeState(treeProps);\n  state.selectionManager.setFocusedKey = key => {\n    setFocusedKey(key);\n  };\n  const {\n    accordionProps\n  } = useReactAriaAccordion({\n    ...commonProps,\n    ...expandableProps\n  }, state, domRef);\n  const values = useMemo(() => ({\n    state,\n    focusedKey,\n    motionProps,\n    isCompact,\n    isDisabled,\n    hideIndicator,\n    disableAnimation,\n    keepContentMounted,\n    disableIndicatorAnimation\n  }), [focusedKey, isCompact, isDisabled, hideIndicator, selectedKeys, disableAnimation, keepContentMounted, state == null ? void 0 : state.expandedKeys.values, disableIndicatorAnimation, state.expandedKeys.size, state.disabledKeys.size, motionProps]);\n  const getBaseProps = useCallback((props2 = {}) => {\n    return {\n      ref: domRef,\n      className: classNames,\n      \"data-orientation\": \"vertical\",\n      ...mergeProps(accordionProps, filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }), props2)\n    };\n  }, []);\n  const handleFocusChanged = useCallback((isFocused, key) => {\n    isFocused && setFocusedKey(key);\n  }, []);\n  return {\n    Component,\n    values,\n    state,\n    focusedKey,\n    getBaseProps,\n    isSplitted: variant === \"splitted\",\n    classNames,\n    showDivider,\n    dividerProps,\n    disableAnimation,\n    handleFocusChanged,\n    itemClasses\n  };\n}\nexport { useAccordion };","map":{"version":3,"names":["filterDOMProps","React","useCallback","useTreeState","mergeProps","accordion","useDOMRef","useMemo","useState","useReactAriaAccordion","useAccordion","props","ref","as","children","className","items","variant","motionProps","expandedKeys","disabledKeys","selectedKeys","defaultExpandedKeys","selectionMode","selectionBehavior","keepContentMounted","disallowEmptySelection","defaultSelectedKeys","onExpandedChange","onSelectionChange","dividerProps","isCompact","isDisabled","showDivider","hideIndicator","disableAnimation","disableIndicatorAnimation","itemClasses","otherProps","focusedKey","setFocusedKey","Component","shouldFilterDOMProps","domRef","classNames","treeChildren","treeChildren2","Children","map","child","_a","isValidElement","clonedChild","cloneElement","hasChildItems","push","commonProps","expandableProps","treeProps","state","selectionManager","key","accordionProps","values","size","getBaseProps","props2","enabled","handleFocusChanged","isFocused","isSplitted"],"sources":["/Users/elisabjorg/Documents/my-app/node_modules/@nextui-org/accordion/dist/chunk-AWBPGPDD.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-accordion.ts\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport React, { useCallback } from \"react\";\nimport { useTreeState } from \"@react-stately/tree\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { accordion } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useState } from \"react\";\nimport { useReactAriaAccordion } from \"@nextui-org/use-aria-accordion\";\nfunction useAccordion(props) {\n  const {\n    ref,\n    as,\n    children,\n    className,\n    items,\n    variant,\n    motionProps,\n    expandedKeys,\n    disabledKeys,\n    selectedKeys,\n    defaultExpandedKeys,\n    selectionMode = \"single\",\n    selectionBehavior = \"toggle\",\n    keepContentMounted = false,\n    disallowEmptySelection,\n    defaultSelectedKeys,\n    onExpandedChange,\n    onSelectionChange,\n    dividerProps = {},\n    isCompact = false,\n    isDisabled = false,\n    showDivider = true,\n    hideIndicator = false,\n    disableAnimation = false,\n    disableIndicatorAnimation = false,\n    itemClasses,\n    ...otherProps\n  } = props;\n  const [focusedKey, setFocusedKey] = useState(null);\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const classNames = useMemo(\n    () => accordion({\n      variant,\n      className\n    }),\n    [variant, className]\n  );\n  const treeChildren = useMemo(() => {\n    let treeChildren2 = [];\n    React.Children.map(children, (child) => {\n      var _a;\n      if (React.isValidElement(child) && typeof ((_a = child.props) == null ? void 0 : _a.children) !== \"string\") {\n        const clonedChild = React.cloneElement(child, {\n          hasChildItems: false\n        });\n        treeChildren2.push(clonedChild);\n      } else {\n        treeChildren2.push(child);\n      }\n    });\n    return treeChildren2;\n  }, [children]);\n  const commonProps = {\n    children: treeChildren,\n    items\n  };\n  const expandableProps = {\n    expandedKeys,\n    defaultExpandedKeys,\n    onExpandedChange\n  };\n  const treeProps = {\n    disabledKeys,\n    selectedKeys,\n    selectionMode,\n    selectionBehavior,\n    disallowEmptySelection,\n    defaultSelectedKeys: defaultSelectedKeys != null ? defaultSelectedKeys : defaultExpandedKeys,\n    onSelectionChange,\n    ...commonProps,\n    ...expandableProps\n  };\n  const state = useTreeState(treeProps);\n  state.selectionManager.setFocusedKey = (key) => {\n    setFocusedKey(key);\n  };\n  const { accordionProps } = useReactAriaAccordion(\n    {\n      ...commonProps,\n      ...expandableProps\n    },\n    state,\n    domRef\n  );\n  const values = useMemo(\n    () => ({\n      state,\n      focusedKey,\n      motionProps,\n      isCompact,\n      isDisabled,\n      hideIndicator,\n      disableAnimation,\n      keepContentMounted,\n      disableIndicatorAnimation\n    }),\n    [\n      focusedKey,\n      isCompact,\n      isDisabled,\n      hideIndicator,\n      selectedKeys,\n      disableAnimation,\n      keepContentMounted,\n      state == null ? void 0 : state.expandedKeys.values,\n      disableIndicatorAnimation,\n      state.expandedKeys.size,\n      state.disabledKeys.size,\n      motionProps\n    ]\n  );\n  const getBaseProps = useCallback((props2 = {}) => {\n    return {\n      ref: domRef,\n      className: classNames,\n      \"data-orientation\": \"vertical\",\n      ...mergeProps(\n        accordionProps,\n        filterDOMProps(otherProps, {\n          enabled: shouldFilterDOMProps\n        }),\n        props2\n      )\n    };\n  }, []);\n  const handleFocusChanged = useCallback((isFocused, key) => {\n    isFocused && setFocusedKey(key);\n  }, []);\n  return {\n    Component,\n    values,\n    state,\n    focusedKey,\n    getBaseProps,\n    isSplitted: variant === \"splitted\",\n    classNames,\n    showDivider,\n    dividerProps,\n    disableAnimation,\n    handleFocusChanged,\n    itemClasses\n  };\n}\n\nexport {\n  useAccordion\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,SAASA,cAAc,QAAQ,yBAAyB;AACxD,OAAOC,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACzC,SAASC,qBAAqB,QAAQ,gCAAgC;AACtE,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,MAAM;IACJC,GAAG;IACHC,EAAE;IACFC,QAAQ;IACRC,SAAS;IACTC,KAAK;IACLC,OAAO;IACPC,WAAW;IACXC,YAAY;IACZC,YAAY;IACZC,YAAY;IACZC,mBAAmB;IACnBC,aAAa,GAAG,QAAQ;IACxBC,iBAAiB,GAAG,QAAQ;IAC5BC,kBAAkB,GAAG,KAAK;IAC1BC,sBAAsB;IACtBC,mBAAmB;IACnBC,gBAAgB;IAChBC,iBAAiB;IACjBC,YAAY,GAAG,CAAC,CAAC;IACjBC,SAAS,GAAG,KAAK;IACjBC,UAAU,GAAG,KAAK;IAClBC,WAAW,GAAG,IAAI;IAClBC,aAAa,GAAG,KAAK;IACrBC,gBAAgB,GAAG,KAAK;IACxBC,yBAAyB,GAAG,KAAK;IACjCC,WAAW;IACX,GAAGC;EACL,CAAC,GAAG3B,KAAK;EACT,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMiC,SAAS,GAAG5B,EAAE,IAAI,KAAK;EAC7B,MAAM6B,oBAAoB,GAAG,OAAOD,SAAS,KAAK,QAAQ;EAC1D,MAAME,MAAM,GAAGrC,SAAS,CAACM,GAAG,CAAC;EAC7B,MAAMgC,UAAU,GAAGrC,OAAO,CACxB,MAAMF,SAAS,CAAC;IACdY,OAAO;IACPF;EACF,CAAC,CAAC,EACF,CAACE,OAAO,EAAEF,SAAS,CACrB,CAAC;EACD,MAAM8B,YAAY,GAAGtC,OAAO,CAAC,MAAM;IACjC,IAAIuC,aAAa,GAAG,EAAE;IACtB7C,KAAK,CAAC8C,QAAQ,CAACC,GAAG,CAAClC,QAAQ,EAAGmC,KAAK,IAAK;MACtC,IAAIC,EAAE;MACN,IAAIjD,KAAK,CAACkD,cAAc,CAACF,KAAK,CAAC,IAAI,QAAQ,CAACC,EAAE,GAAGD,KAAK,CAACtC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGuC,EAAE,CAACpC,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAC1G,MAAMsC,WAAW,GAAGnD,KAAK,CAACoD,YAAY,CAACJ,KAAK,EAAE;UAC5CK,aAAa,EAAE;QACjB,CAAC,CAAC;QACFR,aAAa,CAACS,IAAI,CAACH,WAAW,CAAC;MACjC,CAAC,MAAM;QACLN,aAAa,CAACS,IAAI,CAACN,KAAK,CAAC;MAC3B;IACF,CAAC,CAAC;IACF,OAAOH,aAAa;EACtB,CAAC,EAAE,CAAChC,QAAQ,CAAC,CAAC;EACd,MAAM0C,WAAW,GAAG;IAClB1C,QAAQ,EAAE+B,YAAY;IACtB7B;EACF,CAAC;EACD,MAAMyC,eAAe,GAAG;IACtBtC,YAAY;IACZG,mBAAmB;IACnBM;EACF,CAAC;EACD,MAAM8B,SAAS,GAAG;IAChBtC,YAAY;IACZC,YAAY;IACZE,aAAa;IACbC,iBAAiB;IACjBE,sBAAsB;IACtBC,mBAAmB,EAAEA,mBAAmB,IAAI,IAAI,GAAGA,mBAAmB,GAAGL,mBAAmB;IAC5FO,iBAAiB;IACjB,GAAG2B,WAAW;IACd,GAAGC;EACL,CAAC;EACD,MAAME,KAAK,GAAGxD,YAAY,CAACuD,SAAS,CAAC;EACrCC,KAAK,CAACC,gBAAgB,CAACpB,aAAa,GAAIqB,GAAG,IAAK;IAC9CrB,aAAa,CAACqB,GAAG,CAAC;EACpB,CAAC;EACD,MAAM;IAAEC;EAAe,CAAC,GAAGrD,qBAAqB,CAC9C;IACE,GAAG+C,WAAW;IACd,GAAGC;EACL,CAAC,EACDE,KAAK,EACLhB,MACF,CAAC;EACD,MAAMoB,MAAM,GAAGxD,OAAO,CACpB,OAAO;IACLoD,KAAK;IACLpB,UAAU;IACVrB,WAAW;IACXa,SAAS;IACTC,UAAU;IACVE,aAAa;IACbC,gBAAgB;IAChBV,kBAAkB;IAClBW;EACF,CAAC,CAAC,EACF,CACEG,UAAU,EACVR,SAAS,EACTC,UAAU,EACVE,aAAa,EACbb,YAAY,EACZc,gBAAgB,EAChBV,kBAAkB,EAClBkC,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACxC,YAAY,CAAC4C,MAAM,EAClD3B,yBAAyB,EACzBuB,KAAK,CAACxC,YAAY,CAAC6C,IAAI,EACvBL,KAAK,CAACvC,YAAY,CAAC4C,IAAI,EACvB9C,WAAW,CAEf,CAAC;EACD,MAAM+C,YAAY,GAAG/D,WAAW,CAAC,CAACgE,MAAM,GAAG,CAAC,CAAC,KAAK;IAChD,OAAO;MACLtD,GAAG,EAAE+B,MAAM;MACX5B,SAAS,EAAE6B,UAAU;MACrB,kBAAkB,EAAE,UAAU;MAC9B,GAAGxC,UAAU,CACX0D,cAAc,EACd9D,cAAc,CAACsC,UAAU,EAAE;QACzB6B,OAAO,EAAEzB;MACX,CAAC,CAAC,EACFwB,MACF;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,MAAME,kBAAkB,GAAGlE,WAAW,CAAC,CAACmE,SAAS,EAAER,GAAG,KAAK;IACzDQ,SAAS,IAAI7B,aAAa,CAACqB,GAAG,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IACLpB,SAAS;IACTsB,MAAM;IACNJ,KAAK;IACLpB,UAAU;IACV0B,YAAY;IACZK,UAAU,EAAErD,OAAO,KAAK,UAAU;IAClC2B,UAAU;IACVX,WAAW;IACXH,YAAY;IACZK,gBAAgB;IAChBiC,kBAAkB;IAClB/B;EACF,CAAC;AACH;AAEA,SACE3B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}