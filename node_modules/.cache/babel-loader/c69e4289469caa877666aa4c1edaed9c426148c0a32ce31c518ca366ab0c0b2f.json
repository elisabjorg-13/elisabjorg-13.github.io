{"ast":null,"code":"\"use client\";\n\n// src/use-snippet.ts\nimport { snippet } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useClipboard } from \"@nextui-org/use-clipboard\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction useSnippet(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, snippet.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    symbol = \"$\",\n    classNames,\n    timeout,\n    copyIcon,\n    checkIcon,\n    codeString,\n    disableCopy = false,\n    disableTooltip = false,\n    hideCopyButton = false,\n    autoFocus = false,\n    hideSymbol = false,\n    onCopy: onCopyProp,\n    tooltipProps: userTooltipProps = {},\n    copyButtonProps: userButtonProps = {},\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const tooltipProps = {\n    offset: 15,\n    delay: 1e3,\n    content: \"Copy to clipboard\",\n    color: originalProps == null ? void 0 : originalProps.color,\n    isDisabled: props.disableCopy,\n    ...userTooltipProps\n  };\n  const domRef = useDOMRef(ref);\n  const preRef = useRef(null);\n  const {\n    copy,\n    copied\n  } = useClipboard({\n    timeout\n  });\n  const isMultiLine = children && Array.isArray(children);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(() => snippet({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const symbolBefore = useMemo(() => {\n    if (!symbol || typeof symbol !== \"string\") return symbol;\n    const str = symbol.trim();\n    return str ? `${str} ` : \"\";\n  }, [symbol]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getSnippetProps = useCallback(() => ({\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    })\n  }), [slots, baseStyles, isMultiLine, otherProps]);\n  const onCopy = useCallback(() => {\n    var _a;\n    if (disableCopy) {\n      return;\n    }\n    let stringValue = \"\";\n    if (typeof children === \"string\") {\n      stringValue = children;\n    } else if (Array.isArray(children)) {\n      children.forEach(child => {\n        var _a2, _b;\n        const childString = typeof child === \"string\" ? child : (_b = (_a2 = child == null ? void 0 : child.props) == null ? void 0 : _a2.children) == null ? void 0 : _b.toString();\n        if (childString) {\n          stringValue += childString + \"\\n\";\n        }\n      });\n    }\n    const valueToCopy = codeString || stringValue || ((_a = preRef.current) == null ? void 0 : _a.textContent) || \"\";\n    copy(valueToCopy);\n    onCopyProp == null ? void 0 : onCopyProp(valueToCopy);\n  }, [copy, codeString, disableCopy, onCopyProp, children]);\n  const copyButtonProps = {\n    \"aria-label\": typeof tooltipProps.content === \"string\" ? tooltipProps.content : \"Copy to clipboard\",\n    size: \"sm\",\n    variant: \"light\",\n    isDisabled: disableCopy,\n    onPress: onCopy,\n    isIconOnly: true,\n    ...userButtonProps\n  };\n  const getCopyButtonProps = useCallback(() => ({\n    ...copyButtonProps,\n    \"data-copied\": dataAttr(copied),\n    className: slots.copyButton({\n      class: clsx(classNames == null ? void 0 : classNames.copyButton)\n    })\n  }), [slots, isFocusVisible, isFocused, disableCopy, classNames == null ? void 0 : classNames.copyButton, copyButtonProps, focusProps]);\n  return {\n    Component,\n    as,\n    domRef,\n    preRef,\n    children,\n    slots,\n    classNames,\n    copied,\n    onCopy,\n    copyIcon,\n    checkIcon,\n    symbolBefore,\n    isMultiLine,\n    isFocusVisible,\n    hideCopyButton,\n    disableCopy,\n    disableTooltip,\n    hideSymbol,\n    tooltipProps,\n    getSnippetProps,\n    getCopyButtonProps\n  };\n}\nexport { useSnippet };","map":{"version":3,"names":["snippet","mapPropsVariants","useDOMRef","filterDOMProps","clsx","dataAttr","useClipboard","useFocusRing","useMemo","useCallback","useRef","useSnippet","originalProps","props","variantProps","variantKeys","ref","as","children","symbol","classNames","timeout","copyIcon","checkIcon","codeString","disableCopy","disableTooltip","hideCopyButton","autoFocus","hideSymbol","onCopy","onCopyProp","tooltipProps","userTooltipProps","copyButtonProps","userButtonProps","className","otherProps","Component","shouldFilterDOMProps","offset","delay","content","color","isDisabled","domRef","preRef","copy","copied","isMultiLine","Array","isArray","isFocusVisible","isFocused","focusProps","slots","Object","values","symbolBefore","str","trim","baseStyles","base","getSnippetProps","class","enabled","_a","stringValue","forEach","child","_a2","_b","childString","toString","valueToCopy","current","textContent","size","variant","onPress","isIconOnly","getCopyButtonProps","copyButton"],"sources":["/Users/elisabjorg/Documents/my-app/node_modules/@nextui-org/snippet/dist/chunk-JKDRPOQT.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-snippet.ts\nimport { snippet } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useClipboard } from \"@nextui-org/use-clipboard\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction useSnippet(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, snippet.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    symbol = \"$\",\n    classNames,\n    timeout,\n    copyIcon,\n    checkIcon,\n    codeString,\n    disableCopy = false,\n    disableTooltip = false,\n    hideCopyButton = false,\n    autoFocus = false,\n    hideSymbol = false,\n    onCopy: onCopyProp,\n    tooltipProps: userTooltipProps = {},\n    copyButtonProps: userButtonProps = {},\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const tooltipProps = {\n    offset: 15,\n    delay: 1e3,\n    content: \"Copy to clipboard\",\n    color: originalProps == null ? void 0 : originalProps.color,\n    isDisabled: props.disableCopy,\n    ...userTooltipProps\n  };\n  const domRef = useDOMRef(ref);\n  const preRef = useRef(null);\n  const { copy, copied } = useClipboard({ timeout });\n  const isMultiLine = children && Array.isArray(children);\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(\n    () => snippet({\n      ...variantProps\n    }),\n    [...Object.values(variantProps)]\n  );\n  const symbolBefore = useMemo(() => {\n    if (!symbol || typeof symbol !== \"string\")\n      return symbol;\n    const str = symbol.trim();\n    return str ? `${str} ` : \"\";\n  }, [symbol]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getSnippetProps = useCallback(\n    () => ({\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      })\n    }),\n    [slots, baseStyles, isMultiLine, otherProps]\n  );\n  const onCopy = useCallback(() => {\n    var _a;\n    if (disableCopy) {\n      return;\n    }\n    let stringValue = \"\";\n    if (typeof children === \"string\") {\n      stringValue = children;\n    } else if (Array.isArray(children)) {\n      children.forEach((child) => {\n        var _a2, _b;\n        const childString = typeof child === \"string\" ? child : (_b = (_a2 = child == null ? void 0 : child.props) == null ? void 0 : _a2.children) == null ? void 0 : _b.toString();\n        if (childString) {\n          stringValue += childString + \"\\n\";\n        }\n      });\n    }\n    const valueToCopy = codeString || stringValue || ((_a = preRef.current) == null ? void 0 : _a.textContent) || \"\";\n    copy(valueToCopy);\n    onCopyProp == null ? void 0 : onCopyProp(valueToCopy);\n  }, [copy, codeString, disableCopy, onCopyProp, children]);\n  const copyButtonProps = {\n    \"aria-label\": typeof tooltipProps.content === \"string\" ? tooltipProps.content : \"Copy to clipboard\",\n    size: \"sm\",\n    variant: \"light\",\n    isDisabled: disableCopy,\n    onPress: onCopy,\n    isIconOnly: true,\n    ...userButtonProps\n  };\n  const getCopyButtonProps = useCallback(\n    () => ({\n      ...copyButtonProps,\n      \"data-copied\": dataAttr(copied),\n      className: slots.copyButton({\n        class: clsx(classNames == null ? void 0 : classNames.copyButton)\n      })\n    }),\n    [\n      slots,\n      isFocusVisible,\n      isFocused,\n      disableCopy,\n      classNames == null ? void 0 : classNames.copyButton,\n      copyButtonProps,\n      focusProps\n    ]\n  );\n  return {\n    Component,\n    as,\n    domRef,\n    preRef,\n    children,\n    slots,\n    classNames,\n    copied,\n    onCopy,\n    copyIcon,\n    checkIcon,\n    symbolBefore,\n    isMultiLine,\n    isFocusVisible,\n    hideCopyButton,\n    disableCopy,\n    disableTooltip,\n    hideSymbol,\n    tooltipProps,\n    getSnippetProps,\n    getCopyButtonProps\n  };\n}\n\nexport {\n  useSnippet\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}