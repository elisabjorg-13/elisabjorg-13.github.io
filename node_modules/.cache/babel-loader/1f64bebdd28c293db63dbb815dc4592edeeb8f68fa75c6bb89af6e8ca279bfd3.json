{"ast":null,"code":"import _objectSpread from \"/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $488c6ddbf4ef74c2$var$formatterCache = new Map();\nvar $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n    signDisplay: \"exceptZero\"\n  }).resolvedOptions().signDisplay === \"exceptZero\";\n  // eslint-disable-next-line no-empty\n} catch (e) {}\nvar $488c6ddbf4ef74c2$var$supportsUnit = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n    style: \"unit\",\n    unit: \"degree\"\n  }).resolvedOptions().style === \"unit\";\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nvar $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: \"\\xb0\",\n      \"ja-JP\": \" 度\",\n      \"zh-TW\": \"度\",\n      \"sl-SI\": \" \\xb0\"\n    }\n  }\n};\nvar $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = /*#__PURE__*/function () {\n  function $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5);\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n  _createClass($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5, [{\n    key: \"format\",\n    value: /** Formats a number value as a string, according to the locale and options provided to the constructor. */function format(value) {\n      var res = \"\";\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n      if (this.options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n        var _UNITS_unit;\n        var _this$resolvedOptions = this.resolvedOptions(),\n          unit = _this$resolvedOptions.unit,\n          _this$resolvedOptions2 = _this$resolvedOptions.unitDisplay,\n          unitDisplay = _this$resolvedOptions2 === void 0 ? \"short\" : _this$resolvedOptions2,\n          locale = _this$resolvedOptions.locale;\n        var values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n        res += values[locale] || values.default;\n      }\n      return res;\n    }\n    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value) {\n      // TODO: implement signDisplay for formatToParts\n      // @ts-ignore\n      return this.numberFormatter.formatToParts(value);\n    }\n    /** Formats a number range as a string. */\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRange === \"function\")\n        // @ts-ignore\n        return this.numberFormatter.formatRange(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      // Very basic fallback for old browsers.\n      return \"\".concat(this.format(start), \" \\u2013 \").concat(this.format(end));\n    }\n    /** Formats a number range as an array of parts. */\n  }, {\n    key: \"formatRangeToParts\",\n    value: function formatRangeToParts(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRangeToParts === \"function\")\n        // @ts-ignore\n        return this.numberFormatter.formatRangeToParts(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      var startParts = this.numberFormatter.formatToParts(start);\n      var endParts = this.numberFormatter.formatToParts(end);\n      return [].concat(_toConsumableArray(startParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"startRange\"\n        });\n      })), [{\n        type: \"literal\",\n        value: \" – \",\n        source: \"shared\"\n      }], _toConsumableArray(endParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"endRange\"\n        });\n      })));\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var options = this.numberFormatter.resolvedOptions();\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = _objectSpread(_objectSpread({}, options), {}, {\n        signDisplay: this.options.signDisplay\n      });\n      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === \"unit\") options = _objectSpread(_objectSpread({}, options), {}, {\n        style: \"unit\",\n        unit: this.options.unit,\n        unitDisplay: this.options.unitDisplay\n      });\n      return options;\n    }\n  }]);\n  return $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5;\n}();\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options = options,\n    numberingSystem = _options.numberingSystem;\n  if (numberingSystem && locale.indexOf(\"-u-nu-\") === -1) locale = \"\".concat(locale, \"-u-nu-\").concat(numberingSystem);\n  if (options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var _UNITS_unit;\n    var _options2 = options,\n      unit = _options2.unit,\n      _options2$unitDisplay = _options2.unitDisplay,\n      unitDisplay = _options2$unitDisplay === void 0 ? \"short\" : _options2$unitDisplay;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(\"Unsupported unit \".concat(unit, \" with unitDisplay = \").concat(unitDisplay));\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      style: \"decimal\"\n    });\n  }\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : \"\");\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  var numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === \"auto\") return numberFormat.format(num);else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));else {\n    var needsPositiveSign = false;\n    if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === \"exceptZero\") {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n    if (needsPositiveSign) {\n      var negative = numberFormat.format(-num);\n      var noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      var minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n      if (_toConsumableArray(minus).length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n      var positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nvar $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\"latn\", \"arab\", \"hanidec\"];\nvar $6c7bd7858deea686$export$cd11ab140839f11d = /*#__PURE__*/function () {\n  function $6c7bd7858deea686$export$cd11ab140839f11d(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $6c7bd7858deea686$export$cd11ab140839f11d);\n    this.locale = locale;\n    this.options = options;\n  }\n  _createClass($6c7bd7858deea686$export$cd11ab140839f11d, [{\n    key: \"parse\",\n    value:\n    /**\n    * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n    */\n    function parse(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n    }\n    /**\n    * Returns whether the given string could potentially be a valid number. This should be used to\n    * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n    * of the minus/plus sign characters can be checked.\n    */\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value, minValue, maxValue) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n    }\n    /**\n    * Returns a numbering system for which the given string is valid in the current locale.\n    * If no numbering system could be detected, the default numbering system for the current\n    * locale is returned.\n    */\n  }, {\n    key: \"getNumberingSystem\",\n    value: function getNumberingSystem(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n    }\n  }]);\n  return $6c7bd7858deea686$export$cd11ab140839f11d;\n}();\nvar $6c7bd7858deea686$var$numberParserCache = new Map();\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  var defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n    for (var _i = 0, _$6c7bd7858deea686$va = $6c7bd7858deea686$var$NUMBERING_SYSTEMS; _i < _$6c7bd7858deea686$va.length; _i++) {\n      var numberingSystem = _$6c7bd7858deea686$va[_i];\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        var parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) return parser;\n      }\n    }\n  }\n  return defaultParser;\n}\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : \"\");\n  var parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n  return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nvar $6c7bd7858deea686$var$NumberParserImpl = /*#__PURE__*/function () {\n  function $6c7bd7858deea686$var$NumberParserImpl(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $6c7bd7858deea686$var$NumberParserImpl);\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n  _createClass($6c7bd7858deea686$var$NumberParserImpl, [{\n    key: \"parse\",\n    value: function parse(value) {\n      // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n      var fullySanitizedValue = this.sanitize(value);\n      // Remove group characters, and replace decimal points and numerals with ASCII values.\n      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\").replace(this.symbols.decimal, \".\").replace(this.symbols.minusSign, \"-\").replace(this.symbols.numeral, this.symbols.index);\n      var newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n      if (isNaN(newValue)) return NaN;\n      // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n      if (this.options.currencySign === \"accounting\" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n      // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n      if (this.options.style === \"percent\") {\n        newValue /= 100;\n        var _this_options_maximumFractionDigits;\n        // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n        newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);\n      }\n      return newValue;\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(value) {\n      // Remove literals and whitespace, which are allowed anywhere in the string\n      value = value.replace(this.symbols.literals, \"\");\n      // Replace the ASCII minus sign with the minus sign used in the current locale\n      // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n      value = value.replace(\"-\", this.symbols.minusSign);\n      // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n      // instead they use the , (44) character or apparently the (1548) character.\n      if (this.options.numberingSystem === \"arab\") {\n        value = value.replace(\",\", this.symbols.decimal);\n        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n        value = $6c7bd7858deea686$var$replaceAll(value, \".\", this.symbols.group);\n      }\n      // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n      // so allow 'period' as a group char and replace it with a space\n      if (this.options.locale === \"fr-FR\") value = $6c7bd7858deea686$var$replaceAll(value, \".\", String.fromCharCode(8239));\n      return value;\n    }\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value) {\n      var minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n      var maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n      value = this.sanitize(value);\n      // Remove minus or plus sign, which must be at the start of the string.\n      if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n      // Numbers cannot start with a group separator\n      if (value.startsWith(this.symbols.group)) return false;\n      // Remove numerals, groups, and decimals\n      value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, \"\").replace(this.symbols.numeral, \"\").replace(this.symbols.decimal, \"\");\n      // The number is valid if there are no remaining characters\n      return value.length === 0;\n    }\n  }]);\n  return $6c7bd7858deea686$var$NumberParserImpl;\n}();\nvar $6c7bd7858deea686$var$nonLiteralParts = new Set([\"decimal\", \"fraction\", \"integer\", \"minusSign\", \"plusSign\", \"group\"]);\n// This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes\n// all unique numbers which we need to check in order to determine all the plural forms for a given locale.\n// See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script\nvar $6c7bd7858deea686$var$pluralNumbers = [0, 4, 2, 1, 11, 20, 3, 7, 100, 21, 0.1, 1.1];\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2;\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  var allParts = formatter.formatToParts(-10000.111);\n  var posAllParts = formatter.formatToParts(10000.111);\n  var pluralParts = $6c7bd7858deea686$var$pluralNumbers.map(function (n) {\n    return formatter.formatToParts(n);\n  });\n  var _allParts_find_value;\n  var minusSign = (_allParts_find_value = (_allParts_find = allParts.find(function (p) {\n    return p.type === \"minusSign\";\n  })) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n  var plusSign = (_posAllParts_find = posAllParts.find(function (p) {\n    return p.type === \"plusSign\";\n  })) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n  var decimal = (_allParts_find1 = allParts.find(function (p) {\n    return p.type === \"decimal\";\n  })) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  var group = (_allParts_find2 = allParts.find(function (p) {\n    return p.type === \"group\";\n  })) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value;\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  var allPartsLiterals = allParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n  var pluralPartsLiterals = pluralParts.flatMap(function (p) {\n    return p.filter(function (p) {\n      return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n    }).map(function (p) {\n      return $6c7bd7858deea686$var$escapeRegex(p.value);\n    });\n  });\n  var sortedLiterals = _toConsumableArray(new Set([].concat(_toConsumableArray(allPartsLiterals), _toConsumableArray(pluralPartsLiterals)))).sort(function (a, b) {\n    return b.length - a.length;\n  });\n  var literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(\"\".concat(sortedLiterals.join(\"|\"), \"|[\\\\p{White_Space}]\"), \"gu\");\n  // These are for replacing non-latn characters with the latn equivalent\n  var numerals = _toConsumableArray(new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)).reverse();\n  var indexes = new Map(numerals.map(function (d, i) {\n    return [d, i];\n  }));\n  var numeral = new RegExp(\"[\".concat(numerals.join(\"\"), \"]\"), \"g\");\n  var index = function index(d) {\n    return String(indexes.get(d));\n  };\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll)\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"names":["$488c6ddbf4ef74c2$var$formatterCache","Map","$488c6ddbf4ef74c2$var$supportsSignDisplay","Intl","NumberFormat","signDisplay","resolvedOptions","e","$488c6ddbf4ef74c2$var$supportsUnit","style","unit","$488c6ddbf4ef74c2$var$UNITS","degree","narrow","default","$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5","locale","options","arguments","length","undefined","_classCallCheck","numberFormatter","$488c6ddbf4ef74c2$var$getCachedNumberFormatter","_createClass","key","value","format","res","$488c6ddbf4ef74c2$export$711b50b3c525e0f2","_UNITS_unit","_this$resolvedOptions","_this$resolvedOptions2","unitDisplay","values","formatToParts","formatRange","start","end","RangeError","concat","formatRangeToParts","startParts","endParts","_toConsumableArray","map","p","_objectSpread","source","type","_options","numberingSystem","indexOf","_options2","_options2$unitDisplay","Error","cacheKey","Object","entries","sort","a","b","join","has","get","set","numberFormat","num","Math","abs","needsPositiveSign","is","negative","noSign","minus","replace","console","warn","positive","$6c7bd7858deea686$var$CURRENCY_SIGN_REGEX","RegExp","$6c7bd7858deea686$var$NUMBERING_SYSTEMS","$6c7bd7858deea686$export$cd11ab140839f11d","parse","$6c7bd7858deea686$var$getNumberParserImpl","isValidPartialNumber","minValue","maxValue","getNumberingSystem","$6c7bd7858deea686$var$numberParserCache","defaultParser","$6c7bd7858deea686$var$getCachedNumberParser","includes","_i","_$6c7bd7858deea686$va","parser","$6c7bd7858deea686$var$NumberParserImpl","formatter","symbols","$6c7bd7858deea686$var$getSymbols","fullySanitizedValue","sanitize","$6c7bd7858deea686$var$replaceAll","group","decimal","minusSign","numeral","index","newValue","NaN","isNaN","currencySign","test","_this_options_maximumFractionDigits","toFixed","maximumFractionDigits","literals","String","fromCharCode","Infinity","startsWith","slice","plusSign","$6c7bd7858deea686$var$nonLiteralParts","Set","$6c7bd7858deea686$var$pluralNumbers","intlOptions","originalOptions","_allParts_find","_posAllParts_find","_allParts_find1","_allParts_find2","allParts","posAllParts","pluralParts","n","_allParts_find_value","find","allPartsLiterals","filter","$6c7bd7858deea686$var$escapeRegex","pluralPartsLiterals","flatMap","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","replaceAll","split","string"],"sources":["/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@internationalized/number/dist/packages/@internationalized/number/src/index.ts","/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@internationalized/number/dist/packages/@internationalized/number/src/NumberFormatter.ts","/Users/elisabjorg/Documents/elisabjorg-13/elisabjorg-13.github.io/node_modules/@internationalized/number/dist/packages/@internationalized/number/src/NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\n// This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes\n// all unique numbers which we need to check in order to determine all the plural forms for a given locale.\n// See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script\nconst pluralNumbers = [\n  0, 4, 2, 1, 11, 20, 3, 7, 100, 21, 0.1, 1.1\n];\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let pluralParts = pluralNumbers.map(n => formatter.formatToParts(n));\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let allPartsLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let pluralPartsLiterals = pluralParts.flatMap(p => p.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value)));\n  let sortedLiterals = [...new Set([...allPartsLiterals, ...pluralPartsLiterals])].sort((a, b) => b.length - a.length);\n\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}