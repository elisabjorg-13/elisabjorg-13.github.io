{"ast":null,"code":"import _slicedToArray from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark($fc36f9a046a9ce79$export$cfc14088dfefce5f);\nimport { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $c74cda7d31af1253$export$c84671f46d6a1ca = /*#__PURE__*/function () {\n  function $c74cda7d31af1253$export$c84671f46d6a1ca() {\n    _classCallCheck(this, $c74cda7d31af1253$export$c84671f46d6a1ca);\n  }\n  _createClass($c74cda7d31af1253$export$c84671f46d6a1ca, [{\n    key: \"shouldInvalidate\",\n    value:\n    /**\n    * Returns whether the layout should invalidate in response to\n    * visible rectangle changes. By default, it only invalidates\n    * when the collection view's size changes. Return true always\n    * to make the layout invalidate while scrolling (e.g. sticky headers).\n    */\n    function shouldInvalidate(newRect, oldRect) {\n      // By default, invalidate when the size changes\n      return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n    }\n    /**\n    * This method allows the layout to perform any pre-computation\n    * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n    * Called by the collection view before {@link getVisibleLayoutInfos}\n    * or {@link getLayoutInfo} are called.\n    */\n  }, {\n    key: \"validate\",\n    value: function validate(invalidationContext) {}\n    /**\n    * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n    * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n    * @param point The point at which the drag occurred.\n    */ // getDragTarget(point: Point): DragTarget | null {\n    //   let target = this.virtualizer.keyAtPoint(point);\n    //   if (!target) {\n    //     return null;\n    //   }\n    //   return {\n    //     type: 'item',\n    //     key: target\n    //   };\n    // }\n    /**\n    * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n    * to reject the drop. The dropped items will be inserted before the resulting target.\n    * @param point The point at which the drop occurred.\n    */ // getDropTarget(point: Point): DropTarget | null {\n    //   return null;\n    // }\n    /**\n    * Returns the starting attributes for an animated insertion.\n    * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n    * The default implementation just returns its input.\n    *\n    * @param layoutInfo The proposed LayoutInfo for this view.\n    */\n  }, {\n    key: \"getInitialLayoutInfo\",\n    value: function getInitialLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n    /**\n    * Returns the ending attributes for an animated removal.\n    * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n    * to the one returned by this method. The default implementation returns its input.\n    *\n    * @param layoutInfo The original LayoutInfo for this view.\n    */\n  }, {\n    key: \"getFinalLayoutInfo\",\n    value: function getFinalLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n  }]);\n  return $c74cda7d31af1253$export$c84671f46d6a1ca;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $d7fd61009c21d0bb$export$7e0eeb9da702a085 = /*#__PURE__*/function () {\n  /**\n  * @param type A string representing the view type. Should be `'item'` for item views.\n                          Other types are used by supplementary views.\n  * @param key The unique key for this view.\n  * @param rect The rectangle describing the size and position of this view.\n  */\n  function $d7fd61009c21d0bb$export$7e0eeb9da702a085(type, key, rect) {\n    _classCallCheck(this, $d7fd61009c21d0bb$export$7e0eeb9da702a085);\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n  _createClass($d7fd61009c21d0bb$export$7e0eeb9da702a085, [{\n    key: \"copy\",\n    value:\n    /**\n    * Returns a copy of the LayoutInfo.\n    */\n    function copy() {\n      var res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n      res.estimatedSize = this.estimatedSize;\n      res.opacity = this.opacity;\n      res.transform = this.transform;\n      res.parentKey = this.parentKey;\n      res.isSticky = this.isSticky;\n      res.zIndex = this.zIndex;\n      res.allowOverflow = this.allowOverflow;\n      return res;\n    }\n  }]);\n  return $d7fd61009c21d0bb$export$7e0eeb9da702a085;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $3041db3296945e6e$export$baf26146a414f24a = /*#__PURE__*/function () {\n  function $3041db3296945e6e$export$baf26146a414f24a() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, $3041db3296945e6e$export$baf26146a414f24a);\n    this.x = x;\n    this.y = y;\n  }\n  _createClass($3041db3296945e6e$export$baf26146a414f24a, [{\n    key: \"copy\",\n    value:\n    /**\n    * Returns a copy of this point.\n    */\n    function copy() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n    }\n    /**\n    * Checks if two points are equal.\n    */\n  }, {\n    key: \"equals\",\n    value: function equals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n    /**\n    * Returns true if this point is the origin.\n    */\n  }, {\n    key: \"isOrigin\",\n    value: function isOrigin() {\n      return this.x === 0 && this.y === 0;\n    }\n  }]);\n  return $3041db3296945e6e$export$baf26146a414f24a;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $60423f92c7f9ad87$export$c79fc6492f3af13d = /*#__PURE__*/function () {\n  function $60423f92c7f9ad87$export$c79fc6492f3af13d() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, $60423f92c7f9ad87$export$c79fc6492f3af13d);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  _createClass($60423f92c7f9ad87$export$c79fc6492f3af13d, [{\n    key: \"maxX\",\n    get:\n    /**\n    * The maximum x-coordinate in the rectangle.\n    */\n    function get() {\n      return this.x + this.width;\n    }\n    /**\n    * The maximum y-coordinate in the rectangle.\n    */\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.y + this.height;\n    }\n    /**\n    * The area of the rectangle.\n    */\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n    /**\n    * The top left corner of the rectangle.\n    */\n  }, {\n    key: \"topLeft\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);\n    }\n    /**\n    * The top right corner of the rectangle.\n    */\n  }, {\n    key: \"topRight\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);\n    }\n    /**\n    * The bottom left corner of the rectangle.\n    */\n  }, {\n    key: \"bottomLeft\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);\n    }\n    /**\n    * The bottom right corner of the rectangle.\n    */\n  }, {\n    key: \"bottomRight\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);\n    }\n    /**\n    * Returns whether this rectangle intersects another rectangle.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"intersects\",\n    value: function intersects(rect) {\n      return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n    }\n    /**\n    * Returns whether this rectangle fully contains another rectangle.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"containsRect\",\n    value: function containsRect(rect) {\n      return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n    }\n    /**\n    * Returns whether the rectangle contains the given point.\n    * @param point - The point to check.\n    */\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n    }\n    /**\n    * Returns the first corner of this rectangle (from top to bottom, left to right)\n    * that is contained in the given rectangle, or null of the rectangles do not intersect.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"getCornerInRect\",\n    value: function getCornerInRect(rect) {\n      for (var _i = 0, _arr = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        if (rect.containsPoint(this[key])) return key;\n      }\n      return null;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(rect) {\n      return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n    }\n  }, {\n    key: \"pointEquals\",\n    value: function pointEquals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n  }, {\n    key: \"sizeEquals\",\n    value: function sizeEquals(size) {\n      return this.width === size.width && this.height === size.height;\n    }\n    /**\n    * Returns the union of this Rect and another.\n    */\n  }, {\n    key: \"union\",\n    value: function union(other) {\n      var x = Math.min(this.x, other.x);\n      var y = Math.min(this.y, other.y);\n      var width = Math.max(this.maxX, other.maxX) - x;\n      var height = Math.max(this.maxY, other.maxY) - y;\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);\n    }\n    /**\n    * Returns the intersection of this Rect with another.\n    * If the rectangles do not intersect, an all zero Rect is returned.\n    */\n  }, {\n    key: \"intersection\",\n    value: function intersection(other) {\n      if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);\n      var x = Math.max(this.x, other.x);\n      var y = Math.max(this.y, other.y);\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);\n    }\n    /**\n    * Returns a copy of this rectangle.\n    */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n    }\n  }]);\n  return $60423f92c7f9ad87$export$c79fc6492f3af13d;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec = /*#__PURE__*/function () {\n  function $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec() {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec);\n    this.width = width;\n    this.height = height;\n  }\n  _createClass($ee1bfa90a957fb8a$export$cb6da89c6af1a8ec, [{\n    key: \"copy\",\n    value:\n    /**\n    * Returns a copy of this size.\n    */\n    function copy() {\n      return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n    }\n    /**\n    * Returns whether this size is equal to another one.\n    */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.width === other.width && this.height === other.height;\n    }\n    /**\n    * The total area of the Size.\n    */\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n  }]);\n  return $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $ad1d98aa8f0c31b4$var$KEY = 0;\nvar $ad1d98aa8f0c31b4$export$1a5223887c560441 = /*#__PURE__*/function () {\n  function $ad1d98aa8f0c31b4$export$1a5223887c560441(virtualizer) {\n    _classCallCheck(this, $ad1d98aa8f0c31b4$export$1a5223887c560441);\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n  _createClass($ad1d98aa8f0c31b4$export$1a5223887c560441, [{\n    key: \"prepareForReuse\",\n    value:\n    /**\n    * Prepares the view for reuse. Called just before the view is removed from the DOM.\n    */\n    function prepareForReuse() {\n      this.content = null;\n      this.rendered = null;\n      this.layoutInfo = null;\n    }\n  }]);\n  return $ad1d98aa8f0c31b4$export$1a5223887c560441;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// use high res timer if available\nvar $3eb131dcf37ad5f8$var$perf = typeof window !== \"undefined\" ? window.performance : null;\n// @ts-ignore\nvar $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nvar $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nvar $3eb131dcf37ad5f8$var$fixTs;\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  var canceled = false;\n  var raf_id;\n  var promise = new Promise(function (resolve) {\n    var start = $3eb131dcf37ad5f8$var$getTime();\n    var diffX = end.x - begin.x;\n    var diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();\n      // check if we're done\n      var delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        var proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n  return promise;\n}\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  var res = new Set();\n  var _iterator = _createForOfIteratorHelper(a.keys()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (!b.has(key)) res.add(key);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  var toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  var toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  var toUpdate = new Set();\n  var _iterator2 = _createForOfIteratorHelper(a.keys()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      if (b.has(key)) toUpdate.add(key);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\nfunction $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  var _len,\n    iterators,\n    _key,\n    _i2,\n    _iterators,\n    iterator,\n    _args = arguments;\n  return _regeneratorRuntime().wrap(function $fc36f9a046a9ce79$export$cfc14088dfefce5f$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        for (_len = _args.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n          iterators[_key] = _args[_key];\n        }\n        _i2 = 0, _iterators = iterators;\n      case 2:\n        if (!(_i2 < _iterators.length)) {\n          _context.next = 8;\n          break;\n        }\n        iterator = _iterators[_i2];\n        return _context.delegateYield(iterator, \"t0\", 5);\n      case 5:\n        _i2++;\n        _context.next = 2;\n        break;\n      case 8:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  var res = {};\n  for (var key in object) res[object[key]] = key;\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  var _iterator3 = _createForOfIteratorHelper(a),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var key = _step3.value;\n      if (!b.has(key)) return false;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return true;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $364191b3decf3697$var$RollingAverage = /*#__PURE__*/function () {\n  function $364191b3decf3697$var$RollingAverage() {\n    _classCallCheck(this, $364191b3decf3697$var$RollingAverage);\n    this.count = 0;\n    this.value = 0;\n  }\n  _createClass($364191b3decf3697$var$RollingAverage, [{\n    key: \"addSample\",\n    value: function addSample(sample) {\n      this.count++;\n      this.value += (sample - this.value) / this.count;\n    }\n  }]);\n  return $364191b3decf3697$var$RollingAverage;\n}();\nvar $364191b3decf3697$export$4455ee6afb38dcbb = /*#__PURE__*/function () {\n  function $364191b3decf3697$export$4455ee6afb38dcbb() {\n    _classCallCheck(this, $364191b3decf3697$export$4455ee6afb38dcbb);\n    this.startTime = 0;\n    this.averagePerf = new $364191b3decf3697$var$RollingAverage();\n    this.averageTime = new $364191b3decf3697$var$RollingAverage();\n    this.velocity = new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5);\n    this.overscanX = new $364191b3decf3697$var$RollingAverage();\n    this.overscanY = new $364191b3decf3697$var$RollingAverage();\n    this.visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n  }\n  _createClass($364191b3decf3697$export$4455ee6afb38dcbb, [{\n    key: \"setVisibleRect\",\n    value: function setVisibleRect(rect) {\n      var time = performance.now() - this.startTime;\n      if (time < 500) {\n        this.averageTime.addSample(time);\n        if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n        if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n      this.startTime = performance.now();\n      this.visibleRect = rect;\n    }\n  }, {\n    key: \"collectMetrics\",\n    value: function collectMetrics() {\n      var time = performance.now() - this.startTime;\n      if (time < 500) this.averagePerf.addSample(time);\n      if (this.visibleRect.height > 0) {\n        var o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n        this.overscanY.addSample(o);\n      }\n      if (this.visibleRect.width > 0) {\n        var _o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n        this.overscanX.addSample(_o);\n      }\n    }\n  }, {\n    key: \"getOverscannedRect\",\n    value: function getOverscannedRect() {\n      var overscanned = this.visibleRect.copy();\n      var overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n      if (this.velocity.y > 0) {\n        overscanned.y -= overscanY * 0.2;\n        overscanned.height += overscanY + overscanY * 0.2;\n      } else {\n        overscanned.y -= overscanY;\n        overscanned.height += overscanY + overscanY * 0.2;\n      }\n      var overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n      if (this.velocity.x > 0) {\n        overscanned.x -= overscanX * 0.2;\n        overscanned.width += overscanX + overscanX * 0.2;\n      } else {\n        overscanned.x -= overscanX;\n        overscanned.width += overscanX + overscanX * 0.2;\n      }\n      return overscanned;\n    }\n  }]);\n  return $364191b3decf3697$export$4455ee6afb38dcbb;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $8e135e531d8dcb66$export$febc5573c75cefb0 = /*#__PURE__*/_createClass(function $8e135e531d8dcb66$export$febc5573c75cefb0() {\n  _classCallCheck(this, $8e135e531d8dcb66$export$febc5573c75cefb0);\n  this.level = 0;\n  this.actions = [];\n  this.animated = true;\n  this.initialMap = new Map();\n  this.finalMap = new Map();\n  this.initialLayoutInfo = new Map();\n  this.finalLayoutInfo = new Map();\n  this.removed = new Map();\n  this.toRemove = new Map();\n});\nvar $38b9490c1cca8fc4$export$89be5a243e59c4b2 = /*#__PURE__*/function () {\n  function $38b9490c1cca8fc4$export$89be5a243e59c4b2() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, $38b9490c1cca8fc4$export$89be5a243e59c4b2);\n    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();\n    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n    var _options_transitionDuration;\n    // Set options from passed object if given\n    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (var _i3 = 0, _arr2 = [\"delegate\", \"size\", \"layout\", \"collection\"]; _i3 < _arr2.length; _i3++) {\n      var key = _arr2[_i3];\n      if (options[key]) this[key] = options[key];\n    }\n  }\n  _createClass($38b9490c1cca8fc4$export$89be5a243e59c4b2, [{\n    key: \"_setContentSize\",\n    value: function _setContentSize(size) {\n      this._contentSize = size;\n      this.delegate.setContentSize(size);\n    }\n  }, {\n    key: \"_setContentOffset\",\n    value: function _setContentOffset(offset) {\n      var rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n      this.delegate.setVisibleRect(rect);\n    }\n    /**\n    * Get the size of the scrollable content.\n    */\n  }, {\n    key: \"contentSize\",\n    get: function get() {\n      return this._contentSize;\n    }\n    /**\n    * Get the collection view's currently visible rectangle.\n    */\n  }, {\n    key: \"visibleRect\",\n    get: function get() {\n      return this._visibleRect;\n    }\n    /**\n    * Set the collection view's currently visible rectangle.\n    */,\n    set: function set(rect) {\n      this._setVisibleRect(rect);\n    }\n  }, {\n    key: \"_setVisibleRect\",\n    value: function _setVisibleRect(rect) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var current = this._visibleRect;\n      // Ignore if the rects are equal\n      if (rect.equals(current)) return;\n      if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n      var shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n      this._resetAnimatedContentOffset();\n      this._visibleRect = rect;\n      if (shouldInvalidate)\n        // We are already in a layout effect when this method is called, so relayoutNow is appropriate.\n        this.relayoutNow({\n          offsetChanged: !rect.pointEquals(current),\n          sizeChanged: !rect.sizeEquals(current)\n        });else this.updateSubviews(forceUpdate);\n    }\n  }, {\n    key: \"collection\",\n    get: function get() {\n      return this._collection;\n    },\n    set: function set(data) {\n      this._setData(data);\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(data) {\n      var _this = this;\n      if (data === this._collection) return;\n      if (this._collection) this._runTransaction(function () {\n        _this._collection = data;\n      }, this.transitionDuration > 0);else {\n        this._collection = data;\n        this.reloadData();\n      }\n    }\n    /**\n    * Reloads the data from the data source and relayouts the collection view.\n    * Does not animate any changes. Equivalent to re-assigning the same data source\n    * to the collection view.\n    */\n  }, {\n    key: \"reloadData\",\n    value: function reloadData() {\n      this.relayout({\n        contentChanged: true\n      });\n    }\n    /**\n    * Returns the item with the given key.\n    */\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this._collection ? this._collection.getItem(key) : null;\n    }\n    /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  }, {\n    key: \"persistedKeys\",\n    get: function get() {\n      return this._persistedKeys;\n    }\n    /** The set of persisted keys are always present in the DOM, even if not currently in view. */,\n    set: function set(persistedKeys) {\n      if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {\n        this._persistedKeys = persistedKeys;\n        this.updateSubviews();\n      }\n    }\n    /** Returns whether the given key, or an ancestor, is persisted. */\n  }, {\n    key: \"isPersistedKey\",\n    value: function isPersistedKey(key) {\n      // Quick check if the key is directly in the set of persisted keys.\n      if (this._persistedKeys.has(key)) return true;\n      // If not, check if the key is an ancestor of any of the persisted keys.\n      var _iterator4 = _createForOfIteratorHelper(this._persistedKeys),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var k = _step4.value;\n          while (k != null) {\n            var layoutInfo = this.layout.getLayoutInfo(k);\n            if (!layoutInfo) break;\n            k = layoutInfo.parentKey;\n            if (k === key) return true;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return false;\n    }\n    /**\n    * Get the collection view's layout.\n    */\n  }, {\n    key: \"layout\",\n    get: function get() {\n      return this._layout;\n    }\n    /**\n    * Set the collection view's layout.\n    */,\n    set: function set(layout) {\n      this.setLayout(layout);\n    }\n    /**\n    * Sets the collection view's layout, optionally with an animated transition\n    * from the current layout to the new layout.\n    * @param layout The layout to switch to.\n    * @param animated Whether to animate the layout change.\n    */\n  }, {\n    key: \"setLayout\",\n    value: function setLayout(layout) {\n      var _this2 = this;\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (layout === this._layout) return;\n      var applyLayout = function applyLayout() {\n        if (_this2._layout)\n          // @ts-ignore\n          _this2._layout.virtualizer = null;\n        layout.virtualizer = _this2;\n        _this2._layout = layout;\n      };\n      if (animated)\n        // Animated layout transitions are really simple, thanks to our transaction support.\n        // We just set the layout inside a transaction action, which runs after the initial\n        // layout infos for the animation are retrieved from the previous layout. Then, the\n        // final layout infos are retrieved from the new layout, and animations occur.\n        this._runTransaction(applyLayout);else {\n        applyLayout();\n        this.relayout();\n      }\n    }\n  }, {\n    key: \"_getReuseType\",\n    value: function _getReuseType(layoutInfo, content) {\n      if (layoutInfo.type === \"item\" && content) {\n        var type = this.delegate.getType ? this.delegate.getType(content) : \"item\";\n        var reuseType = type === \"item\" ? \"item\" : layoutInfo.type + \"_\" + type;\n        return {\n          type: type,\n          reuseType: reuseType\n        };\n      }\n      return {\n        type: layoutInfo.type,\n        reuseType: layoutInfo.type\n      };\n    }\n  }, {\n    key: \"getReusableView\",\n    value: function getReusableView(layoutInfo) {\n      var content = this.getItem(layoutInfo.key);\n      var _this$_getReuseType = this._getReuseType(layoutInfo, content),\n        reuseType = _this$_getReuseType.reuseType;\n      if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n      var reusable = this._reusableViews[reuseType];\n      var view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);\n      view.viewType = reuseType;\n      if (!this._animatedContentOffset.isOrigin()) {\n        layoutInfo = layoutInfo.copy();\n        layoutInfo.rect.x += this._animatedContentOffset.x;\n        layoutInfo.rect.y += this._animatedContentOffset.y;\n      }\n      view.layoutInfo = layoutInfo;\n      this._renderView(view);\n      return view;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView(reusableView) {\n      var _reusableView$layoutI = reusableView.layoutInfo,\n        type = _reusableView$layoutI.type,\n        key = _reusableView$layoutI.key;\n      reusableView.content = this.getItem(key);\n      reusableView.rendered = this._renderContent(type, reusableView.content);\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent(type, content) {\n      var cached = this._renderedContent.get(content);\n      if (cached != null) return cached;\n      var rendered = this.delegate.renderView(type, content);\n      if (content) this._renderedContent.set(content, rendered);\n      return rendered;\n    }\n    /**\n    * Returns an array of all currently visible views, including both\n    * item views and supplementary views.\n    */\n  }, {\n    key: \"visibleViews\",\n    get: function get() {\n      return Array.from(this._visibleViews.values());\n    }\n    /**\n    * Gets the visible view for the given type and key. Returns null if\n    * the view is not currently visible.\n    *\n    * @param key The key of the view to retrieve.\n    */\n  }, {\n    key: \"getView\",\n    value: function getView(key) {\n      return this._visibleViews.get(key) || null;\n    }\n    /**\n    * Returns an array of visible views matching the given type.\n    * @param type The view type to find.\n    */\n  }, {\n    key: \"getViewsOfType\",\n    value: function getViewsOfType(type) {\n      return this.visibleViews.filter(function (v) {\n        return v.layoutInfo && v.layoutInfo.type === type;\n      });\n    }\n    /**\n    * Returns the key for the given view. Returns null\n    * if the view is not currently visible.\n    */\n  }, {\n    key: \"keyForView\",\n    value: function keyForView(view) {\n      if (view && view.layoutInfo) return view.layoutInfo.key;\n      return null;\n    }\n    /**\n    * Returns the key for the item view currently at the given point.\n    */\n  }, {\n    key: \"keyAtPoint\",\n    value: function keyAtPoint(point) {\n      var rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      // Layout may return multiple layout infos in the case of\n      // persisted keys, so find the first one that actually intersects.\n      var _iterator5 = _createForOfIteratorHelper(layoutInfos),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var layoutInfo = _step5.value;\n          if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return null;\n    }\n    /**\n    * Cleanup for when the Virtualizer will be unmounted.\n    */\n  }, {\n    key: \"willUnmount\",\n    value: function willUnmount() {\n      cancelAnimationFrame(this._relayoutRaf);\n    }\n    /**\n    * Triggers a layout invalidation, and updates the visible subviews.\n    */\n  }, {\n    key: \"relayout\",\n    value: function relayout() {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Ignore relayouts while animating the scroll position\n      if (this._scrollAnimation || typeof requestAnimationFrame === \"undefined\") return;\n      // If we already scheduled a relayout, extend the invalidation\n      // context so we coalesce multiple relayouts in the same frame.\n      if (this._invalidationContext) {\n        Object.assign(this._invalidationContext, context);\n        return;\n      }\n      this._invalidationContext = context;\n    }\n    /**\n    * Performs a relayout immediately. Prefer {@link relayout} over this method\n    * where possible, since it coalesces multiple layout passes in the same tick.\n    */\n  }, {\n    key: \"relayoutNow\",\n    value: function relayoutNow() {\n      var _this3 = this;\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n      // Cancel the scheduled relayout, since we're doing it now.\n      if (this._relayoutRaf) {\n        cancelAnimationFrame(this._relayoutRaf);\n        this._relayoutRaf = null;\n        // Update the provided context with the current invalidationContext since we are cancelling\n        // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n        context = _objectSpread(_objectSpread({}, this._invalidationContext), context);\n      }\n      // Reset the invalidation context\n      this._invalidationContext = null;\n      // Do nothing if we don't have a layout or content, or we are\n      // in the middle of an animated scroll transition.\n      if (!this.layout || !this._collection || this._scrollAnimation) return;\n      var scrollAnchor = this._getScrollAnchor();\n      // Trigger the beforeLayout hook, if provided\n      if (typeof context.beforeLayout === \"function\") context.beforeLayout();\n      // Validate the layout\n      this.layout.validate(context);\n      this._setContentSize(this.layout.getContentSize());\n      // Trigger the afterLayout hook, if provided\n      if (typeof context.afterLayout === \"function\") context.afterLayout();\n      // Adjust scroll position based on scroll anchor, and constrain.\n      // If the content changed, scroll to the top.\n      var visibleRect = this.getVisibleRect();\n      var restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n      var contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n      var contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n      contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n      contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n      var hasLayoutUpdates = false;\n      if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n        // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n        // Save the difference between the current and new content offsets, and apply it to the\n        // individual content items instead. At the end of the animation, we'll reset and set the\n        // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n        // the scroll animation and the content animation.\n        if (context.animated || !this._animatedContentOffset.isOrigin()) {\n          this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n          this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n          hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n        } else this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));\n      } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      // Apply layout infos, unless this is coming from an animated transaction\n      if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n      // Wait for animations, and apply the afterAnimation hook, if provided\n      if (context.animated && hasLayoutUpdates) {\n        this._enableTransitions();\n        var done = function done() {\n          _this3._disableTransitions();\n          // Reset scroll position after animations (see above comment).\n          if (!_this3._animatedContentOffset.isOrigin()) {\n            // Get the content offset to scroll to, taking _animatedContentOffset into account.\n            var _this3$getVisibleRect = _this3.getVisibleRect(),\n              x = _this3$getVisibleRect.x,\n              y = _this3$getVisibleRect.y;\n            _this3._resetAnimatedContentOffset();\n            _this3._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y));\n          }\n          if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n        };\n        // Sometimes the animation takes slightly longer than expected.\n        setTimeout(done, this.transitionDuration + 100);\n        return;\n      } else if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n    }\n    /**\n    * Corrects DOM order of visible views to match item order of collection.\n    */\n  }, {\n    key: \"_correctItemOrder\",\n    value: function _correctItemOrder() {\n      // Defer until after scrolling and animated transactions are complete\n      if (this._isScrolling || this._transaction) return;\n      var _iterator6 = _createForOfIteratorHelper(this._visibleLayoutInfos.keys()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key = _step6.value;\n          var view = this._visibleViews.get(key);\n          this._children.delete(view);\n          this._children.add(view);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"_enableTransitions\",\n    value: function _enableTransitions() {\n      this.delegate.beginAnimations();\n    }\n  }, {\n    key: \"_disableTransitions\",\n    value: function _disableTransitions() {\n      this.delegate.endAnimations();\n    }\n  }, {\n    key: \"_getScrollAnchor\",\n    value: function _getScrollAnchor() {\n      if (!this.anchorScrollPosition) return null;\n      var visibleRect = this.getVisibleRect();\n      // Ask the delegate to provide a scroll anchor, if possible\n      if (this.delegate.getScrollAnchor) {\n        var key = this.delegate.getScrollAnchor(visibleRect);\n        if (key != null) {\n          var layoutInfo = this.layout.getLayoutInfo(key);\n          var corner = layoutInfo.rect.getCornerInRect(visibleRect);\n          if (corner) {\n            var _key2 = layoutInfo.key;\n            var offset = layoutInfo.rect[corner].y - visibleRect.y;\n            return {\n              key: _key2,\n              layoutInfo: layoutInfo,\n              corner: corner,\n              offset: offset\n            };\n          }\n        }\n      }\n      // No need to anchor the scroll position if it is at the top\n      if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n      // Find a view with a visible corner that has the smallest distance to the top of the collection view\n      var cornerAnchor = null;\n      var _iterator7 = _createForOfIteratorHelper(this._visibleViews),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n            _key3 = _step7$value[0],\n            view = _step7$value[1];\n          var _layoutInfo = view.layoutInfo;\n          if (_layoutInfo && _layoutInfo.rect.area > 0) {\n            var _corner = _layoutInfo.rect.getCornerInRect(visibleRect);\n            if (_corner) {\n              var _offset = _layoutInfo.rect[_corner].y - visibleRect.y;\n              if (!cornerAnchor || _offset < cornerAnchor.offset) cornerAnchor = {\n                key: _key3,\n                layoutInfo: _layoutInfo,\n                corner: _corner,\n                offset: _offset\n              };\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return cornerAnchor;\n    }\n  }, {\n    key: \"_restoreScrollAnchor\",\n    value: function _restoreScrollAnchor(scrollAnchor, context) {\n      var contentOffset = this.getVisibleRect();\n      if (scrollAnchor) {\n        var _context_transaction;\n        var finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n        if (finalAnchor) {\n          var adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n          contentOffset.y += adjustment;\n        }\n      }\n      return contentOffset;\n    }\n  }, {\n    key: \"getVisibleRect\",\n    value: function getVisibleRect() {\n      var v = this.visibleRect;\n      var x = v.x - this._animatedContentOffset.x;\n      var y = v.y - this._animatedContentOffset.y;\n      return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x, y, v.width, v.height);\n    }\n  }, {\n    key: \"getVisibleLayoutInfos\",\n    value: function getVisibleLayoutInfos() {\n      var rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n      this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n      return this._visibleLayoutInfos;\n    }\n  }, {\n    key: \"_getLayoutInfoMap\",\n    value: function _getLayoutInfoMap(rect) {\n      var copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      var map = new Map();\n      var _iterator8 = _createForOfIteratorHelper(layoutInfos),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var layoutInfo = _step8.value;\n          if (copy) layoutInfo = layoutInfo.copy();\n          map.set(layoutInfo.key, layoutInfo);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return map;\n    }\n  }, {\n    key: \"updateSubviews\",\n    value: function updateSubviews() {\n      var _this4 = this;\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this._collection) return;\n      var visibleLayoutInfos = this.getVisibleLayoutInfos();\n      var currentlyVisible = this._visibleViews;\n      var toAdd, toRemove, toUpdate;\n      // If this is a force update, remove and re-add all views.\n      // Otherwise, find and update the diff.\n      if (forceUpdate) {\n        toAdd = visibleLayoutInfos;\n        toRemove = currentlyVisible;\n        toUpdate = new Set();\n      } else {\n        var _ref = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos);\n        toAdd = _ref.toAdd;\n        toRemove = _ref.toRemove;\n        toUpdate = _ref.toUpdate;\n        var _iterator9 = _createForOfIteratorHelper(toUpdate),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var key = _step9.value;\n            var view = currentlyVisible.get(key);\n            if (!view || !view.layoutInfo) continue;\n            var item = this.getItem(visibleLayoutInfos.get(key).key);\n            if (view.content === item) toUpdate.delete(key);else {\n              // If the view type changes, delete and recreate the view instead of updating\n              var _this$_getReuseType2 = this._getReuseType(view.layoutInfo, item),\n                reuseType = _this$_getReuseType2.reuseType;\n              if (view.viewType !== reuseType) {\n                toUpdate.delete(key);\n                toAdd.add(key);\n                toRemove.add(key);\n              }\n            }\n          }\n          // We are done if the sets are equal\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n          if (this._transaction) this._applyLayoutInfos();\n          return;\n        }\n      }\n      // Track views that should be removed. They are not removed from\n      // the DOM immediately, since we may reuse and need to re-insert\n      // them back into the DOM anyway.\n      var removed = new Set();\n      var _iterator10 = _createForOfIteratorHelper(toRemove.keys()),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _key4 = _step10.value;\n          var _view = this._visibleViews.get(_key4);\n          if (_view) {\n            removed.add(_view);\n            this._visibleViews.delete(_key4);\n            // If we are in the middle of a transaction, wait until the end\n            // of the animations to remove the views from the DOM. Also means\n            // we can't reuse those views immediately.\n            if (this._transaction) this._transaction.toRemove.set(_key4, _view);else this.reuseView(_view);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      var _iterator11 = _createForOfIteratorHelper(toAdd.keys()),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _key5 = _step11.value;\n          var layoutInfo = visibleLayoutInfos.get(_key5);\n          var _view2 = void 0;\n          // If we're in a transaction, and a layout change happens\n          // during the animations such that a view that was going\n          // to be removed is now not, we don't create a new view\n          // since the old one is still in the DOM, marked as toRemove.\n          if (this._transaction) {\n            // if transaction, get initial layout attributes for the animation\n            if (this._transaction.initialLayoutInfo.has(_key5)) layoutInfo = this._transaction.initialLayoutInfo.get(_key5);\n            _view2 = this._transaction.toRemove.get(_key5);\n            if (_view2) {\n              this._transaction.toRemove.delete(_key5);\n              this._applyLayoutInfo(_view2, layoutInfo);\n            }\n          }\n          if (!_view2) {\n            // Create or reuse a view for this row\n            _view2 = this.getReusableView(layoutInfo);\n            // Add the view to the DOM if needed\n            if (!removed.has(_view2)) this._children.add(_view2);\n          }\n          this._visibleViews.set(_key5, _view2);\n          removed.delete(_view2);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      var _iterator12 = _createForOfIteratorHelper(toUpdate),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _key6 = _step12.value;\n          var _view3 = currentlyVisible.get(_key6);\n          this._renderedContent.delete(_key6);\n          this._renderView(_view3);\n        }\n        // Remove the remaining rows to delete from the DOM\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      if (!this._transaction) this.removeViews(removed);\n      this._correctItemOrder();\n      this._flushVisibleViews();\n      var hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n      if (hasLayoutUpdates) requestAnimationFrame(function () {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (_this4._transaction) requestAnimationFrame(function () {\n          return _this4._applyLayoutInfos();\n        });\n      });\n      return hasLayoutUpdates;\n    }\n  }, {\n    key: \"afterRender\",\n    value: function afterRender() {\n      if (this._transactionQueue.length > 0) this._processTransactionQueue();else if (this._invalidationContext) this.relayoutNow();\n      if (this.shouldOverscan) this._overscanManager.collectMetrics();\n    }\n  }, {\n    key: \"_flushVisibleViews\",\n    value: function _flushVisibleViews() {\n      var _this5 = this;\n      // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n      // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n      // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n      // method to build the final tree.\n      var viewsByParentKey = new Map([[null, []]]);\n      var _iterator13 = _createForOfIteratorHelper(this._children),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var view = _step13.value;\n          var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;\n          if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);\n          (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);\n          if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key)) viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      var buildTree = function buildTree(parent, views) {\n        return views.map(function (view) {\n          var children = viewsByParentKey.get(view.layoutInfo.key);\n          return _this5.delegate.renderWrapper(parent, view, children, function (childViews) {\n            return buildTree(view, childViews);\n          });\n        });\n      };\n      var children = buildTree(null, viewsByParentKey.get(null));\n      this.delegate.setVisibleViews(children);\n    }\n  }, {\n    key: \"_applyLayoutInfo\",\n    value: function _applyLayoutInfo(view, layoutInfo) {\n      if (view.layoutInfo === layoutInfo) return false;\n      view.layoutInfo = layoutInfo;\n      return true;\n    }\n  }, {\n    key: \"_applyLayoutInfos\",\n    value: function _applyLayoutInfos() {\n      var updated = false;\n      // Apply layout infos to visible views\n      var _iterator14 = _createForOfIteratorHelper(this._visibleViews.values()),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var _view5 = _step14.value;\n          var _cur2 = _view5.layoutInfo;\n          if ((_cur2 === null || _cur2 === void 0 ? void 0 : _cur2.key) != null) {\n            var _layoutInfo3 = this.layout.getLayoutInfo(_cur2.key);\n            if (this._applyLayoutInfo(_view5, _layoutInfo3)) updated = true;\n          }\n        }\n        // Apply final layout infos for views that will be removed\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      if (this._transaction) {\n        var _iterator15 = _createForOfIteratorHelper(this._transaction.toRemove.values()),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var view = _step15.value;\n            var cur = view.layoutInfo;\n            if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n              var layoutInfo = this.layout.getLayoutInfo(cur.key);\n              if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n        var _iterator16 = _createForOfIteratorHelper(this._transaction.removed.values()),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _view4 = _step16.value;\n            var _cur = _view4.layoutInfo;\n            var _layoutInfo2 = this._transaction.finalLayoutInfo.get(_cur.key) || _cur;\n            _layoutInfo2 = this.layout.getFinalLayoutInfo(_layoutInfo2.copy());\n            if (this._applyLayoutInfo(_view4, _layoutInfo2)) updated = true;\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n      if (updated) this._flushVisibleViews();\n    }\n  }, {\n    key: \"_hasLayoutUpdates\",\n    value: function _hasLayoutUpdates() {\n      if (!this._transaction) return false;\n      var _iterator17 = _createForOfIteratorHelper(this._visibleViews.values()),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var view = _step17.value;\n          var cur = view.layoutInfo;\n          if (!cur) return true;\n          var layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (\n          // Uses equals rather than pointEquals so that width/height changes are taken into account\n          !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"reuseView\",\n    value: function reuseView(view) {\n      view.prepareForReuse();\n      this._reusableViews[view.viewType].push(view);\n    }\n  }, {\n    key: \"removeViews\",\n    value: function removeViews(toRemove) {\n      var _iterator18 = _createForOfIteratorHelper(toRemove),\n        _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var view = _step18.value;\n          this._children.delete(view);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    }\n  }, {\n    key: \"updateItemSize\",\n    value: function updateItemSize(key, size) {\n      // TODO: we should be able to invalidate a single index path\n      // @ts-ignore\n      if (!this.layout.updateItemSize) return;\n      // If the scroll position is currently animating, add the update\n      // to a queue to be processed after the animation is complete.\n      if (this._scrollAnimation) {\n        this._sizeUpdateQueue.set(key, size);\n        return;\n      }\n      // @ts-ignore\n      var changed = this.layout.updateItemSize(key, size);\n      if (changed) this.relayout();\n    }\n  }, {\n    key: \"startScrolling\",\n    value: function startScrolling() {\n      this._isScrolling = true;\n    }\n  }, {\n    key: \"endScrolling\",\n    value: function endScrolling() {\n      this._isScrolling = false;\n      this._correctItemOrder();\n      this._flushVisibleViews();\n    }\n  }, {\n    key: \"_resetAnimatedContentOffset\",\n    value: function _resetAnimatedContentOffset() {\n      // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n      if (!this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n        this._applyLayoutInfos();\n      }\n    }\n    /**\n    * Scrolls the item with the given key into view, optionally with an animation.\n    * @param key The key of the item to scroll into view.\n    * @param duration The duration of the scroll animation.\n    */\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(key, options) {\n      // key can be 0, so check if null or undefined\n      if (key == null) return;\n      var layoutInfo = this.layout.getLayoutInfo(key);\n      if (!layoutInfo) return;\n      var _options$duration = options.duration,\n        duration = _options$duration === void 0 ? 300 : _options$duration,\n        _options$shouldScroll = options.shouldScrollX,\n        shouldScrollX = _options$shouldScroll === void 0 ? true : _options$shouldScroll,\n        _options$shouldScroll2 = options.shouldScrollY,\n        shouldScrollY = _options$shouldScroll2 === void 0 ? true : _options$shouldScroll2,\n        _options$offsetX = options.offsetX,\n        offsetX = _options$offsetX === void 0 ? 0 : _options$offsetX,\n        _options$offsetY = options.offsetY,\n        offsetY = _options$offsetY === void 0 ? 0 : _options$offsetY;\n      var x = this.visibleRect.x;\n      var y = this.visibleRect.y;\n      var minX = layoutInfo.rect.x - offsetX;\n      var minY = layoutInfo.rect.y - offsetY;\n      var maxX = x + this.visibleRect.width;\n      var maxY = y + this.visibleRect.height;\n      if (shouldScrollX) {\n        if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n      }\n      if (shouldScrollY) {\n        if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n      }\n      return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y), duration);\n    }\n    /**\n    * Performs an animated scroll to the given offset.\n    * @param offset - The offset to scroll to.\n    * @param duration The duration of the animation.\n    * @returns A promise that resolves when the animation is complete.\n    */\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(offset) {\n      var _this6 = this;\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n      // Cancel the current scroll animation\n      if (this._scrollAnimation) {\n        this._scrollAnimation.cancel();\n        this._scrollAnimation = null;\n      }\n      // Set the content offset synchronously if the duration is zero\n      if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n        this._setContentOffset(offset);\n        return Promise.resolve();\n      }\n      this.startScrolling();\n      this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), function (offset) {\n        _this6._setContentOffset(offset);\n      });\n      this._scrollAnimation.then(function () {\n        _this6._scrollAnimation = null;\n        // Process view size updates that occurred during the animation.\n        // Only views that are still visible will be actually updated.\n        var _iterator19 = _createForOfIteratorHelper(_this6._sizeUpdateQueue),\n          _step19;\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var _step19$value = _slicedToArray(_step19.value, 2),\n              key = _step19$value[0],\n              size = _step19$value[1];\n            _this6.updateItemSize(key, size);\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n        _this6._sizeUpdateQueue.clear();\n        _this6.relayout();\n        _this6._processTransactionQueue();\n        _this6.endScrolling();\n      });\n      return this._scrollAnimation;\n    }\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(action, animated) {\n      this._startTransaction();\n      if (this._nextTransaction) this._nextTransaction.actions.push(action);\n      this._endTransaction(animated);\n    }\n  }, {\n    key: \"_startTransaction\",\n    value: function _startTransaction() {\n      if (!this._nextTransaction) this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();\n      this._nextTransaction.level++;\n    }\n  }, {\n    key: \"_endTransaction\",\n    value: function _endTransaction(animated) {\n      if (!this._nextTransaction) return false;\n      // Save whether the transaction should be animated.\n      if (animated != null) this._nextTransaction.animated = animated;\n      // If we haven't reached level 0, we are still in a\n      // nested transaction. Wait for the parent to end.\n      if (--this._nextTransaction.level > 0) return false;\n      // Do nothing for empty transactions\n      if (this._nextTransaction.actions.length === 0) {\n        this._nextTransaction = null;\n        return false;\n      }\n      // Default animations to true\n      if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n      // Enqueue the transaction\n      this._transactionQueue.push(this._nextTransaction);\n      this._nextTransaction = null;\n      return true;\n    }\n  }, {\n    key: \"_processTransactionQueue\",\n    value: function _processTransactionQueue() {\n      // If the current transaction is animating, wait until the end\n      // to process the next transaction.\n      if (this._transaction || this._scrollAnimation) return;\n      var next = this._transactionQueue.shift();\n      if (next) this._performTransaction(next);\n    }\n  }, {\n    key: \"_getContentRect\",\n    value: function _getContentRect() {\n      return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);\n    }\n  }, {\n    key: \"_performTransaction\",\n    value: function _performTransaction(transaction) {\n      var _this7 = this;\n      this._transaction = transaction;\n      this.relayoutNow({\n        transaction: transaction,\n        animated: transaction.animated,\n        beforeLayout: function beforeLayout() {\n          // Get the initial layout infos for all views before the updates\n          // so we can figure out which views to add and remove.\n          if (transaction.animated) transaction.initialMap = _this7._getLayoutInfoMap(_this7._getContentRect(), true);\n          // Apply the actions that occurred during this transaction\n          var _iterator20 = _createForOfIteratorHelper(transaction.actions),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var action = _step20.value;\n              action();\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        },\n        afterLayout: function afterLayout() {\n          // Get the final layout infos after the updates\n          if (transaction.animated) {\n            transaction.finalMap = _this7._getLayoutInfoMap(_this7._getContentRect());\n            _this7._setupTransactionAnimations(transaction);\n          } else _this7._transaction = null;\n        },\n        afterAnimation: function afterAnimation() {\n          // Remove and reuse views when animations are done\n          if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n            var _iterator21 = _createForOfIteratorHelper((0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())),\n              _step21;\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var view = _step21.value;\n                _this7._children.delete(view);\n                _this7.reuseView(view);\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n          }\n          _this7._transaction = null;\n          // Ensure DOM order is correct for accessibility after animations are complete\n          _this7._correctItemOrder();\n          _this7._flushVisibleViews();\n          _this7._processTransactionQueue();\n        }\n      });\n    }\n  }, {\n    key: \"_setupTransactionAnimations\",\n    value: function _setupTransactionAnimations(transaction) {\n      var initialMap = transaction.initialMap,\n        finalMap = transaction.finalMap;\n      // Store initial and final layout infos for animations\n      var _iterator22 = _createForOfIteratorHelper(initialMap),\n        _step22;\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var _step22$value = _slicedToArray(_step22.value, 2),\n            key = _step22$value[0],\n            layoutInfo = _step22$value[1];\n          if (finalMap.has(key))\n            // Store the initial layout info for use during animations.\n            transaction.initialLayoutInfo.set(key, layoutInfo);else\n            // This view was removed. Store the layout info for use\n            // in Layout#getFinalLayoutInfo during animations.\n            transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n        }\n        // Get initial layout infos for views that were added\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n      var _iterator23 = _createForOfIteratorHelper(finalMap),\n        _step23;\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var _step23$value = _slicedToArray(_step23.value, 2),\n            _key7 = _step23$value[0],\n            _layoutInfo4 = _step23$value[1];\n          if (!initialMap.has(_key7)) {\n            var initialLayoutInfo = this.layout.getInitialLayoutInfo(_layoutInfo4.copy());\n            transaction.initialLayoutInfo.set(_key7, initialLayoutInfo);\n          }\n        }\n        // Figure out which views were removed.\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n      var _iterator24 = _createForOfIteratorHelper(this._visibleViews),\n        _step24;\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;)\n        // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n        // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n        // added, removed... etc in a loop.\n        {\n          var _step24$value = _slicedToArray(_step24.value, 2),\n            _key8 = _step24$value[0],\n            view = _step24$value[1];\n          if (!finalMap.has(_key8) && view.layoutInfo.rect.width > 0) {\n            transaction.removed.set(_key8, view);\n            this._visibleViews.delete(_key8);\n            // In case something weird happened, where we have a view but no\n            // initial layout info, use the one attached to the view.\n            if (view.layoutInfo) {\n              if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n    }\n  }]);\n  return $38b9490c1cca8fc4$export$89be5a243e59c4b2;\n}();\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  var _ref2 = (0, $8D3nr$useState)([]),\n    _ref3 = _slicedToArray(_ref2, 2),\n    visibleViews = _ref3[0],\n    setVisibleViews = _ref3[1];\n  var _ref4 = (0, $8D3nr$useState)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)()),\n    _ref5 = _slicedToArray(_ref4, 2),\n    contentSize = _ref5[0],\n    setContentSize = _ref5[1];\n  var _ref6 = (0, $8D3nr$useState)(false),\n    _ref7 = _slicedToArray(_ref6, 2),\n    isAnimating = _ref7[0],\n    setAnimating = _ref7[1];\n  var _ref8 = (0, $8D3nr$useState)(false),\n    _ref9 = _slicedToArray(_ref8, 2),\n    isScrolling = _ref9[0],\n    setScrolling = _ref9[1];\n  var virtualizer = (0, $8D3nr$useMemo)(function () {\n    return new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)();\n  }, []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n    setVisibleRect: function setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: function beginAnimations() {\n      return setAnimating(true);\n    },\n    endAnimations: function endAnimations() {\n      return setAnimating(false);\n    },\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  (0, $8D3nr$useLayoutEffect)(function () {\n    virtualizer.afterRender();\n  });\n  // eslint-disable-next-line arrow-body-style\n  (0, $8D3nr$useEffect)(function () {\n    return function () {\n      return virtualizer.willUnmount();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setVisibleRect = (0, $8D3nr$useCallback)(function (rect) {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  var startScrolling = (0, $8D3nr$useCallback)(function () {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  var endScrolling = (0, $8D3nr$useCallback)(function () {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n  var state = (0, $8D3nr$useMemo)(function () {\n    return {\n      virtualizer: virtualizer,\n      visibleViews: visibleViews,\n      setVisibleRect: setVisibleRect,\n      contentSize: contentSize,\n      isAnimating: isAnimating,\n      isScrolling: isScrolling,\n      startScrolling: startScrolling,\n      endScrolling: endScrolling\n    };\n  }, [virtualizer, visibleViews, setVisibleRect, contentSize, isAnimating, isScrolling, startScrolling, endScrolling]);\n  return state;\n}\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"names":["$fc36f9a046a9ce79$export$cfc14088dfefce5f","$c74cda7d31af1253$export$c84671f46d6a1ca","_classCallCheck","_createClass","key","value","shouldInvalidate","newRect","oldRect","width","height","validate","invalidationContext","getInitialLayoutInfo","layoutInfo","getFinalLayoutInfo","$d7fd61009c21d0bb$export$7e0eeb9da702a085","type","rect","parentKey","estimatedSize","isSticky","opacity","transform","zIndex","allowOverflow","copy","res","$3041db3296945e6e$export$baf26146a414f24a","x","arguments","length","undefined","y","equals","point","isOrigin","$60423f92c7f9ad87$export$c79fc6492f3af13d","get","maxX","maxY","intersects","containsRect","containsPoint","getCornerInRect","_i","_arr","pointEquals","sizeEquals","size","union","other","Math","min","max","intersection","$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec","$ad1d98aa8f0c31b4$var$KEY","$ad1d98aa8f0c31b4$export$1a5223887c560441","virtualizer","prepareForReuse","content","rendered","$3eb131dcf37ad5f8$var$perf","window","performance","$3eb131dcf37ad5f8$var$perfNow","now","webkitNow","msNow","mozNow","$3eb131dcf37ad5f8$var$getTime","bind","Date","getTime","$3eb131dcf37ad5f8$var$fixTs","$3eb131dcf37ad5f8$export$dc0b63720788090c","begin","end","duration","ease","fn","canceled","raf_id","promise","Promise","resolve","start","diffX","diffY","requestAnimationFrame","run","t","delta","proceed","cancel","cancelAnimationFrame","$3eb131dcf37ad5f8$export$77860c106b4a6a2e","$3eb131dcf37ad5f8$export$57636bb43b1ccbb0","sin","PI","$fc36f9a046a9ce79$export$37a26b283fd7740e","a","b","Set","_iterator","_createForOfIteratorHelper","keys","_step","s","n","done","has","add","err","e","f","$fc36f9a046a9ce79$export$acaf96a27438246b","toRemove","toAdd","toUpdate","_iterator2","_step2","_len","iterators","_key","_i2","_iterators","iterator","_args","_regeneratorRuntime","wrap","$fc36f9a046a9ce79$export$cfc14088dfefce5f$","_context","prev","next","Array","delegateYield","stop","_marked","$fc36f9a046a9ce79$export$6897c284b6f9f4dc","object","$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64","_iterator3","_step3","$364191b3decf3697$var$RollingAverage","count","addSample","sample","$364191b3decf3697$export$4455ee6afb38dcbb","startTime","averagePerf","averageTime","velocity","overscanX","overscanY","visibleRect","setVisibleRect","time","collectMetrics","o","abs","getOverscannedRect","overscanned","round","$8e135e531d8dcb66$export$febc5573c75cefb0","level","actions","animated","initialMap","Map","finalMap","initialLayoutInfo","finalLayoutInfo","removed","$38b9490c1cca8fc4$export$89be5a243e59c4b2","options","_contentSize","_visibleRect","_reusableViews","_visibleLayoutInfos","_visibleViews","_renderedContent","WeakMap","_children","_invalidationContext","_overscanManager","_persistedKeys","_scrollAnimation","_isScrolling","_sizeUpdateQueue","_animatedContentOffset","_transaction","_nextTransaction","_transactionQueue","_options_transitionDuration","transitionDuration","anchorScrollPosition","anchorScrollPositionAtTop","shouldOverscan","_i3","_arr2","_setContentSize","delegate","setContentSize","_setContentOffset","offset","set","_setVisibleRect","forceUpdate","current","layout","_resetAnimatedContentOffset","relayoutNow","offsetChanged","sizeChanged","updateSubviews","_collection","data","_setData","_this","_runTransaction","reloadData","relayout","contentChanged","getItem","persistedKeys","isPersistedKey","_iterator4","_step4","k","getLayoutInfo","_layout","setLayout","_this2","applyLayout","_getReuseType","getType","reuseType","getReusableView","_this$_getReuseType","reusable","view","pop","viewType","_renderView","reusableView","_reusableView$layoutI","_renderContent","cached","renderView","from","values","getView","getViewsOfType","visibleViews","filter","v","keyForView","keyAtPoint","layoutInfos","getVisibleLayoutInfos","_iterator5","_step5","willUnmount","_relayoutRaf","context","Object","assign","_this3","_objectSpread","scrollAnchor","_getScrollAnchor","beforeLayout","getContentSize","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","contentSize","hasLayoutUpdates","transaction","_applyLayoutInfos","_enableTransitions","_disableTransitions","_this3$getVisibleRect","afterAnimation","setTimeout","_correctItemOrder","_iterator6","_step6","delete","beginAnimations","endAnimations","getScrollAnchor","corner","cornerAnchor","_iterator7","_step7","_step7$value","_slicedToArray","area","contentOffset","_context_transaction","finalAnchor","adjustment","_getLayoutInfoMap","map","_iterator8","_step8","_this4","visibleLayoutInfos","currentlyVisible","_ref","_iterator9","_step9","item","_this$_getReuseType2","_iterator10","_step10","reuseView","_iterator11","_step11","_applyLayoutInfo","_iterator12","_step12","removeViews","_flushVisibleViews","_hasLayoutUpdates","afterRender","_processTransactionQueue","_this5","viewsByParentKey","_iterator13","_step13","_view_layoutInfo","_viewsByParentKey_get","_view_layoutInfo1","_view_layoutInfo2","_view_layoutInfo3","push","buildTree","parent","views","children","renderWrapper","childViews","setVisibleViews","updated","_iterator14","_step14","cur","_iterator15","_step15","_iterator16","_step16","_iterator17","_step17","_iterator18","_step18","updateItemSize","changed","startScrolling","endScrolling","scrollToItem","_options$duration","_options$shouldScroll","shouldScrollX","_options$shouldScroll2","shouldScrollY","_options$offsetX","offsetX","_options$offsetY","offsetY","minX","minY","scrollTo","_this6","then","_iterator19","_step19","_step19$value","clear","action","_startTransaction","_endTransaction","shift","_performTransaction","_getContentRect","_this7","_iterator20","_step20","_setupTransactionAnimations","_iterator21","_step21","_iterator22","_step22","_step22$value","_iterator23","_step23","_step23$value","_iterator24","_step24","_step24$value","$fc0b13b484ac1194$export$1505db82fe357e65","opts","_ref2","$8D3nr$useState","_ref3","_ref4","_ref5","_ref6","_ref7","isAnimating","setAnimating","_ref8","_ref9","isScrolling","setScrolling","$8D3nr$useMemo","onVisibleRectChange","collection","$8D3nr$useLayoutEffect","$8D3nr$useEffect","$8D3nr$useCallback","state"],"sources":["/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/index.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Layout.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/LayoutInfo.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Point.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Rect.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Size.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/ReusableView.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/useVirtualizerState.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Virtualizer.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/tween.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/utils.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/OverscanManager.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Transaction.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {InvalidationContext} from './types';\nexport type {VirtualizerState} from './useVirtualizerState';\nexport type {RectCorner} from './Rect';\n\nexport {Layout} from './Layout';\nexport {LayoutInfo} from './LayoutInfo';\nexport {Point} from './Point';\nexport {Rect} from './Rect';\nexport {Size} from './Size';\nexport {ReusableView} from './ReusableView';\nexport {useVirtualizerState} from './useVirtualizerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns the union of this Rect and another.\n   */\n  union(other: Rect) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Returns the intersection of this Rect with another.\n   * If the rectangles do not intersect, an all zero Rect is returned.\n   */\n  intersection(other: Rect): Rect {\n    if (!this.intersects(other)) {\n      return new Rect(0, 0, 0, 0);\n    }\n\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new Rect(\n      x,\n      y,\n      Math.min(this.maxX, other.maxX) - x,\n      Math.min(this.maxY, other.maxY) - y\n    );\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n\n  /**\n   * The total area of the Size.\n   */\n  get area() {\n    return this.width * this.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let setVisibleRect = useCallback((rect) => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = useCallback(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = useCallback(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      // We are already in a layout effect when this method is called, so relayoutNow is appropriate.\n      this.relayoutNow({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this._transactionQueue.length > 0) {\n      this._processTransactionQueue();\n    } else if (this._invalidationContext) {\n      this.relayoutNow();\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (view.layoutInfo?.parentKey != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo?.parentKey)?.push(view);\n      if (!viewsByParentKey.has(view.layoutInfo?.key)) {\n        viewsByParentKey.set(view.layoutInfo?.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur?.key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if (cur?.key != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) {\n            updated = true;\n          }\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}