{"ast":null,"code":"import _slicedToArray from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\nimport { compareNodeOrder as $Qsto2$compareNodeOrder, getFirstItem as $Qsto2$getFirstItem, getChildNodes as $Qsto2$getChildNodes } from \"@react-stately/collections\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $e40ea825a81a3709$export$52baac22726c72bf = /*#__PURE__*/function (_Set) {\n  _inherits($e40ea825a81a3709$export$52baac22726c72bf, _Set);\n  var _super = _createSuper($e40ea825a81a3709$export$52baac22726c72bf);\n  function $e40ea825a81a3709$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n    _classCallCheck(this, $e40ea825a81a3709$export$52baac22726c72bf);\n    _this = _super.call(this, keys);\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n    return _this;\n  }\n  return _createClass($e40ea825a81a3709$export$52baac22726c72bf);\n}( /*#__PURE__*/_wrapNativeSuper(Set));\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  var _iterator = _createForOfIteratorHelper(setA),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (!setB.has(item)) return false;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? \"none\" : _props$selectionMode,\n    disallowEmptySelection = props.disallowEmptySelection,\n    allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n    _props$selectionBehav = props.selectionBehavior,\n    selectionBehaviorProp = _props$selectionBehav === void 0 ? \"toggle\" : _props$selectionBehav,\n    _props$disabledBehavi = props.disabledBehavior,\n    disabledBehavior = _props$disabledBehavi === void 0 ? \"all\" : _props$disabledBehavi;\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  var isFocusedRef = (0, $Qsto2$useRef)(false);\n  var _ref = (0, $Qsto2$useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    _setFocused = _ref2[1];\n  var focusedKeyRef = (0, $Qsto2$useRef)(null);\n  var childFocusStrategyRef = (0, $Qsto2$useRef)(null);\n  var _ref3 = (0, $Qsto2$useState)(null),\n    _ref4 = _slicedToArray(_ref3, 2),\n    _setFocusedKey = _ref4[1];\n  var selectedKeysProp = (0, $Qsto2$useMemo)(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = (0, $Qsto2$useMemo)(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }, [props.defaultSelectedKeys]);\n  var _ref5 = (0, $Qsto2$useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n    _ref6 = _slicedToArray(_ref5, 2),\n    selectedKeys = _ref6[0],\n    _setSelectedKeys = _ref6[1];\n  var disabledKeysProp = (0, $Qsto2$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var _ref7 = (0, $Qsto2$useState)(selectionBehaviorProp),\n    _ref8 = _slicedToArray(_ref7, 2),\n    selectionBehavior = _ref8[0],\n    setSelectionBehavior = _ref8[1];\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === \"replace\" && selectionBehavior === \"toggle\" && typeof selectedKeys === \"object\" && selectedKeys.size === 0) setSelectionBehavior(\"replace\");\n  // If the selectionBehavior prop changes, update the state as well.\n  var lastSelectionBehavior = (0, $Qsto2$useRef)(selectionBehaviorProp);\n  (0, $Qsto2$useEffect)(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n      _setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"first\";\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === \"all\" ? \"all\" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = /*#__PURE__*/function () {\n  function $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n    this.collection = collection;\n    this.state = state;\n    var _options_allowsCellSelection;\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n  }\n  _createClass($d496c0a20b6e58ec$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get:\n    /**\n    * The type of selection that is allowed in the collection.\n    */\n    function get() {\n      return this.state.selectionMode;\n    }\n    /**\n    * Whether the collection allows empty selection.\n    */\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n    /**\n    * The selection behavior for the collection.\n    */\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n    /**\n    * Sets the selection behavior for the collection.\n    */\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n    /**\n    * Whether the collection is currently focused.\n    */\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n    /**\n    * Sets whether the collection is focused.\n    */\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n    /**\n    * The current focused key in the collection.\n    */\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n    /** Whether the first or last child of the focused key should receive focus. */\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n    /**\n    * Sets the focused key.\n    */\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n    }\n    /**\n    * The currently selected keys in the collection.\n    */\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === \"all\" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n    /**\n    * The raw selection value for the collection.\n    * Either 'all' for select all, or a set of keys.\n    */\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n    /**\n    * Returns whether a key is selected.\n    */\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === \"none\") return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === \"all\" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n    /**\n    * Whether the selection is empty.\n    */\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== \"all\" && this.state.selectedKeys.size === 0;\n    }\n    /**\n    * Whether all items in the collection are selected.\n    */\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === \"all\") return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n      var _iterator2 = _createForOfIteratorHelper(this.state.selectedKeys),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          var item = this.collection.getItem(key);\n          if (!first || item && (0, $Qsto2$compareNodeOrder)(this.collection, item, first) < 0) first = item;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n      var _iterator3 = _createForOfIteratorHelper(this.state.selectedKeys),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          var item = this.collection.getItem(key);\n          if (!last || item && (0, $Qsto2$compareNodeOrder)(this.collection, item, last) > 0) last = item;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"disabledKeys\",\n    get: function get() {\n      return this.state.disabledKeys;\n    }\n  }, {\n    key: \"disabledBehavior\",\n    get: function get() {\n      return this.state.disabledBehavior;\n    }\n    /**\n    * Extends the selection to the given key.\n    */\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === \"none\") return;\n      if (this.selectionMode === \"single\") {\n        this.replaceSelection(toKey);\n        return;\n      }\n      toKey = this.getKey(toKey);\n      var selection;\n      // Only select the one key if coming from a select all.\n      if (this.state.selectedKeys === \"all\") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n        var _iterator4 = _createForOfIteratorHelper(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var key = _step4.value;\n            selection.delete(key);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        var _iterator5 = _createForOfIteratorHelper(this.getKeyRange(toKey, anchorKey)),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _key = _step5.value;\n            if (this.canSelectItem(_key)) selection.add(_key);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n      if (fromItem && toItem) {\n        if ((0, $Qsto2$compareNodeOrder)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === \"item\" || item.type === \"cell\" && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item)\n        // ¯\\_(ツ)_/¯\n        return key;\n      // If cell selection is allowed, just return the key.\n      if (item.type === \"cell\" && this.allowsCellSelection) return key;\n      // Find a parent item to select\n      while (item.type !== \"item\" && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n      if (!item || item.type !== \"item\") return null;\n      return item.key;\n    }\n    /**\n    * Toggles whether the given key is selected.\n    */\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === \"none\") return;\n      if (this.selectionMode === \"single\" && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === \"all\" ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n    /**\n    * Replaces the selection with only the given key.\n    */\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === \"none\") return;\n      key = this.getKey(key);\n      if (key == null) return;\n      var selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n      this.state.setSelectedKeys(selection);\n    }\n    /**\n    * Replaces the selection with the given keys.\n    */\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === \"none\") return;\n      var selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n      var _iterator6 = _createForOfIteratorHelper(keys),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key = _step6.value;\n          key = this.getKey(key);\n          if (key != null) {\n            selection.add(key);\n            if (this.selectionMode === \"single\") break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n      var keys = [];\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (_this2.canSelectItem(key)) {\n            var item = _this2.collection.getItem(key);\n            if (item.type === \"item\") keys.push(key);\n            // Add child keys. If cell selection is allowed, then include item children too.\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== \"item\")) addKeys((0, $Qsto2$getFirstItem)((0, $Qsto2$getChildNodes)(item, _this2.collection)).key);\n          }\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n    /**\n    * Selects all items in the collection.\n    */\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (!this.isSelectAll && this.selectionMode === \"multiple\") this.state.setSelectedKeys(\"all\");\n    }\n    /**\n    * Removes all keys from the selection.\n    */\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === \"all\" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n    }\n    /**\n    * Toggles between select all and an empty selection.\n    */\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === \"none\") return;\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === \"toggle\" || e && (e.pointerType === \"touch\" || e.pointerType === \"virtual\"))\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        this.toggleSelection(key);else this.replaceSelection(key);\n    }\n    /**\n    * Returns whether the current selection is equal to the given selection.\n    */\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      // Check if the set of keys match.\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n      var _iterator7 = _createForOfIteratorHelper(selection),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var key = _step7.value;\n          if (!selectedKeys.has(key)) return false;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      var _iterator8 = _createForOfIteratorHelper(selectedKeys),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _key2 = _step8.value;\n          if (!selection.has(_key2)) return false;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === \"none\" || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === \"cell\" && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(key) {\n      return this.state.disabledKeys.has(key) && this.state.disabledBehavior === \"all\";\n    }\n  }, {\n    key: \"isLink\",\n    value: function isLink(key) {\n      var _this_collection_getItem, _this_collection_getItem_props;\n      return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);\n    }\n  }]);\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n}();\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"names":["$e40ea825a81a3709$export$52baac22726c72bf","_Set","_inherits","_super","_createSuper","keys","anchorKey","currentKey","_this","_classCallCheck","call","_createClass","_wrapNativeSuper","Set","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","value","has","err","e","f","$7af3f5b51489e0b5$export$253fe78d46329472","props","_props$selectionMode","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","_props$selectionBehav","selectionBehavior","selectionBehaviorProp","_props$disabledBehavi","disabledBehavior","isFocusedRef","$Qsto2$useRef","_ref","$Qsto2$useState","_ref2","_slicedToArray","setFocused","focusedKeyRef","childFocusStrategyRef","_ref3","_ref4","setFocusedKey","selectedKeysProp","$Qsto2$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","_ref5","$Qsto2$useControlledState","onSelectionChange","_ref6","setSelectedKeys","disabledKeysProp","disabledKeys","_ref7","_ref8","setSelectionBehavior","lastSelectionBehavior","$Qsto2$useEffect","current","isFocused","focusedKey","childFocusStrategy","k","arguments","length","undefined","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","collection","state","options","_options_allowsCellSelection","allowsCellSelection","_isSelectAll","key","get","getItem","getSelectAllKeys","isSelected","getKey","canSelectItem","isEmpty","allKeys","every","first","_iterator2","_step2","$Qsto2$compareNodeOrder","last","_iterator3","_step3","extendSelection","toKey","replaceSelection","_iterator4","getKeyRange","_step4","delete","_iterator5","_step5","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","toggleSelection","_iterator6","_step6","_this2","addKeys","hasChildNodes","$Qsto2$getFirstItem","$Qsto2$getChildNodes","getFirstKey","selectAll","isSelectAll","clearSelection","toggleSelectAll","select","pointerType","isSelectionEqual","_iterator7","_step7","_iterator8","_step8","isDisabled","isLink","_this_collection_getItem","_this_collection_getItem_props","href"],"sources":["/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/index.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/useMultipleSelectionState.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/Selection.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {MultipleSelectionStateProps} from './useMultipleSelectionState';\nexport type {FocusState, SingleSelectionState, MultipleSelectionState, MultipleSelectionManager} from './types';\nexport {useMultipleSelectionState} from './useMultipleSelectionState';\nexport {SelectionManager} from './SelectionManager';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Set<Key> {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {compareNodeOrder, getChildNodes, getFirstItem} from '@react-stately/collections';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key | null, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item && compareNodeOrder(this.collection, item, first) < 0)) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item && compareNodeOrder(this.collection, item, last) > 0)) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (compareNodeOrder(this.collection, fromItem, toItem) <= 0) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys(getFirstItem(getChildNodes(item, this.collection)).key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (!this.isSelectAll && this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n\n  isLink(key: Key) {\n    return !!this.collection.getItem(key)?.props?.href;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}