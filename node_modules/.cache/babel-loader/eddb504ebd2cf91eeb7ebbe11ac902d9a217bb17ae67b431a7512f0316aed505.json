{"ast":null,"code":"import _regeneratorRuntime from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _inherits from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/elisabjorg/Documents/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection, getFirstItem as $1BfjW$getFirstItem, getLastItem as $1BfjW$getLastItem, CollectionBuilder as $1BfjW$CollectionBuilder } from \"@react-stately/collections\";\nimport $1BfjW$react, { useState as $1BfjW$useState, useMemo as $1BfjW$useMemo, useCallback as $1BfjW$useCallback } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nimport { tableNestedRows as $1BfjW$tableNestedRows } from \"@react-stately/flags\";\nimport { useControlledState as $1BfjW$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2022 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2022 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\nfunction $6818b1c4fc67028d$export$9078bad4c3934604(width) {\n  if (!width) return 1;\n  var match = width.match(/^(.+)(?=fr$)/);\n  // if width is the incorrect format, just default it to a 1fr\n  if (!match) {\n    console.warn(\"width: \".concat(width, \" is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')\"), \"defaulting to '1fr'\");\n    return 1;\n  }\n  return parseFloat(match[0]);\n}\nfunction $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === \"string\") {\n    var match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error(\"Only percentages or numbers are supported for static column widths\");\n    return tableWidth * (parseFloat(match[0]) / 100);\n  }\n  return width;\n}\nfunction $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;\n}\nfunction $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;\n}\nfunction $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {\n  var hasNonFrozenItems = false;\n  var flexItems = columns.map(function (column, index) {\n    var _column_width, _ref, _ref1;\n    var width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : \"1fr\";\n    var frozen = false;\n    var baseSize = 0;\n    var flex = 0;\n    var targetMainSize = null;\n    if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {\n      baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);\n      frozen = true;\n    } else {\n      flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);\n      if (flex <= 0) frozen = true;\n    }\n    var _column_minWidth, _ref2;\n    var min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);\n    var max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);\n    var hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n    // 9.7.1\n    // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.\n    // 9.7.2\n    if (frozen) targetMainSize = hypotheticalMainSize;else if (baseSize > hypotheticalMainSize) {\n      frozen = true;\n      targetMainSize = hypotheticalMainSize;\n    }\n    // 9.7.3\n    if (!frozen) hasNonFrozenItems = true;\n    return {\n      frozen: frozen,\n      baseSize: baseSize,\n      hypotheticalMainSize: hypotheticalMainSize,\n      min: min,\n      max: max,\n      flex: flex,\n      targetMainSize: targetMainSize,\n      violation: 0\n    };\n  });\n  // 9.7.4\n  // 9.7.4.a\n  var _loop = function _loop() {\n    // 9.7.4.b\n    /**\n    * Calculate the remaining free space as for initial free space,\n    * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is\n    * less than one, multiply the initial free space by this sum (of flex factors).\n    * If the magnitude of this value is less than the magnitude of\n    * the remaining free space, use this as the remaining free space.\n    */\n    var usedWidth = 0;\n    var flexFactors = 0;\n    flexItems.forEach(function (item) {\n      if (item.frozen) usedWidth += item.targetMainSize;else {\n        usedWidth += item.baseSize;\n        flexFactors += item.flex;\n      }\n    });\n    var remainingFreeSpace = availableWidth - usedWidth;\n    // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0\n    // so no need to check for flexFactors < 1\n    // 9.7.4.c\n    /**\n    * If the remaining free space is zero\n    * - Do nothing.\n    * Else // remember, we're always in grow mode\n    * - Find the ratio of the item’s flex grow factor to the\n    * sum of the flex grow factors of all unfrozen items on\n    * the line. Set the item’s target main size to its flex\n    * base size plus a fraction of the remaining free space\n    * proportional to the ratio.\n    */\n    if (remainingFreeSpace > 0) flexItems.forEach(function (item) {\n      if (!item.frozen) {\n        var ratio = item.flex / flexFactors;\n        item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;\n      }\n    });\n    // 9.7.4.d\n    /**\n    * Fix min/max violations. Clamp each non-frozen item’s\n    * target main size by its used min and max main sizes\n    * and floor its content-box size at zero. If the item’s\n    * target main size was made smaller by this, it’s a max\n    * violation. If the item’s target main size was made\n    * larger by this, it’s a min violation.\n    */\n    var totalViolation = 0;\n    flexItems.forEach(function (item) {\n      item.violation = 0;\n      if (!item.frozen) {\n        var min = item.min,\n          max = item.max,\n          targetMainSize = item.targetMainSize;\n        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n        item.violation = item.targetMainSize - targetMainSize;\n        totalViolation += item.violation;\n      }\n    });\n    // 9.7.4.e\n    /**\n    * Freeze over-flexed items. The total violation is the\n    * sum of the adjustments from the previous step\n    * ∑(clamped size - unclamped size). If the total violation is:\n    * Zero\n    * - Freeze all items.\n    *\n    * Positive\n    * - Freeze all the items with min violations.\n    *\n    * Negative\n    * - Freeze all the items with max violations.\n    */\n    hasNonFrozenItems = false;\n    flexItems.forEach(function (item) {\n      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) item.frozen = true;else if (!item.frozen) hasNonFrozenItems = true;\n    });\n  };\n  while (hasNonFrozenItems) {\n    _loop();\n  }\n  return $6818b1c4fc67028d$var$cascadeRounding(flexItems);\n}\nfunction $6818b1c4fc67028d$var$cascadeRounding(flexItems) {\n  /*\n  Given an array of floats that sum to an integer, this rounds the floats\n  and returns an array of integers with the same sum.\n  */\n  var fpTotal = 0;\n  var intTotal = 0;\n  var roundedArray = [];\n  flexItems.forEach(function (item) {\n    var float = item.targetMainSize;\n    var integer = Math.round(float + fpTotal) - intTotal;\n    fpTotal += float;\n    intTotal += integer;\n    roundedArray.push(integer);\n  });\n  return roundedArray;\n}\nvar $a9e7ae544a4e41dd$export$7ff77a162970b30e = /*#__PURE__*/function () {\n  function $a9e7ae544a4e41dd$export$7ff77a162970b30e(options) {\n    _classCallCheck(this, $a9e7ae544a4e41dd$export$7ff77a162970b30e);\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n    var _options_getDefaultWidth;\n    this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : function () {\n      return \"1fr\";\n    };\n    var _options_getDefaultMinWidth;\n    this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : function () {\n      return 75;\n    };\n  }\n  _createClass($a9e7ae544a4e41dd$export$7ff77a162970b30e, [{\n    key: \"splitColumnsIntoControlledAndUncontrolled\",\n    value: /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */function splitColumnsIntoControlledAndUncontrolled(columns) {\n      return columns.reduce(function (acc, col) {\n        if (col.props.width != null) acc[0].set(col.key, col);else acc[1].set(col.key, col);\n        return acc;\n      }, [new Map(), new Map()]);\n    }\n    /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  }, {\n    key: \"recombineColumns\",\n    value: function recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {\n      return new Map(columns.map(function (col) {\n        if (uncontrolledColumns.has(col.key)) return [col.key, uncontrolledWidths.get(col.key)];else return [col.key, controlledColumns.get(col.key).props.width];\n      }));\n    }\n    /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  }, {\n    key: \"getInitialUncontrolledWidths\",\n    value: function getInitialUncontrolledWidths(uncontrolledColumns) {\n      var _this2 = this;\n      var _col_props_defaultWidth, _ref;\n      return new Map(Array.from(uncontrolledColumns).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          col = _ref4[1];\n        var _this, _this_getDefaultWidth;\n        return [key, (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = _this2).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : \"1fr\"];\n      }));\n    }\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(key) {\n      var _this_columnWidths_get;\n      return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;\n    }\n  }, {\n    key: \"getColumnMinWidth\",\n    value: function getColumnMinWidth(key) {\n      return this.columnMinWidths.get(key);\n    }\n  }, {\n    key: \"getColumnMaxWidth\",\n    value: function getColumnMaxWidth(key) {\n      return this.columnMaxWidths.get(key);\n    }\n  }, {\n    key: \"resizeColumnWidth\",\n    value: function resizeColumnWidth(tableWidth, collection, controlledWidths, uncontrolledWidths) {\n      var _this3 = this;\n      var col = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var width = arguments.length > 5 ? arguments[5] : undefined;\n      var prevColumnWidths = this.columnWidths;\n      // resizing a column\n      var resizeIndex = Infinity;\n      var resizingChanged = new Map([].concat(_toConsumableArray(controlledWidths), _toConsumableArray(uncontrolledWidths)));\n      var percentKeys = new Map();\n      var frKeysToTheRight = new Map();\n      var minWidths = new Map();\n      // freeze columns to the left to their previous pixel value\n      collection.columns.forEach(function (column, i) {\n        var _column_props_width, _column_props_width_endsWith;\n        var frKey;\n        var frValue;\n        minWidths.set(column.key, _this3.getDefaultMinWidth(collection.columns[i]));\n        if (col !== column.key && !column.props.width && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(uncontrolledWidths.get(column.key))) {\n          // uncontrolled don't have props.width for us, so instead get from our state\n          frKey = column.key;\n          frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(uncontrolledWidths.get(column.key));\n        } else if (col !== column.key && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(column.props.width) && !uncontrolledWidths.get(column.key)) {\n          // controlledWidths will be the same in the collection\n          frKey = column.key;\n          frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(column.props.width);\n        } else if (col !== column.key && ((_column_props_width = column.props.width) === null || _column_props_width === void 0 ? void 0 : (_column_props_width_endsWith = _column_props_width.endsWith) === null || _column_props_width_endsWith === void 0 ? void 0 : _column_props_width_endsWith.call(_column_props_width, \"%\"))) percentKeys.set(column.key, column.props.width);\n        // don't freeze columns to the right of the resizing one\n        if (resizeIndex < i) {\n          if (frKey) frKeysToTheRight.set(frKey, frValue);\n          return;\n        }\n        // we already know the new size of the resizing column\n        if (column.key === col) {\n          resizeIndex = i;\n          resizingChanged.set(column.key, Math.floor(width));\n          return;\n        }\n        // freeze column to previous value\n        resizingChanged.set(column.key, prevColumnWidths.get(column.key));\n      });\n      // predict pixels sizes for all columns based on resize\n      var columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(function (col) {\n        return _objectSpread(_objectSpread({}, col.props), {}, {\n          key: col.key\n        });\n      }), resizingChanged, function (i) {\n        return _this3.getDefaultWidth(collection.columns[i]);\n      }, function (i) {\n        return _this3.getDefaultMinWidth(collection.columns[i]);\n      });\n      // set all new column widths for onResize event\n      // columns going in will be the same order as the columns coming out\n      var newWidths = new Map();\n      // set all column widths based on calculateColumnSize\n      columnWidths.forEach(function (width, index) {\n        var key = collection.columns[index].key;\n        newWidths.set(key, width);\n      });\n      // add FR's back as they were to columns to the right\n      Array.from(frKeysToTheRight).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n          key = _ref6[0];\n        newWidths.set(key, \"\".concat(frKeysToTheRight.get(key), \"fr\"));\n      });\n      // put back in percents\n      Array.from(percentKeys).forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          width = _ref8[1];\n        // resizing locks a column to a px width\n        if (key === col) return;\n        newWidths.set(key, width);\n      });\n      return newWidths;\n    }\n  }, {\n    key: \"buildColumnWidths\",\n    value: function buildColumnWidths(tableWidth, collection, widths) {\n      var _this4 = this;\n      this.columnWidths = new Map();\n      this.columnMinWidths = new Map();\n      this.columnMaxWidths = new Map();\n      // initial layout or table/window resizing\n      var columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(function (col) {\n        return _objectSpread(_objectSpread({}, col.props), {}, {\n          key: col.key\n        });\n      }), widths, function (i) {\n        return _this4.getDefaultWidth(collection.columns[i]);\n      }, function (i) {\n        return _this4.getDefaultMinWidth(collection.columns[i]);\n      });\n      // columns going in will be the same order as the columns coming out\n      columnWidths.forEach(function (width, index) {\n        var key = collection.columns[index].key;\n        var column = collection.columns[index];\n        _this4.columnWidths.set(key, width);\n        var _column_props_minWidth;\n        _this4.columnMinWidths.set(key, (0, $6818b1c4fc67028d$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : _this4.getDefaultMinWidth(column), tableWidth));\n        _this4.columnMaxWidths.set(key, (0, $6818b1c4fc67028d$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));\n      });\n      return this.columnWidths;\n    }\n  }]);\n  return $a9e7ae544a4e41dd$export$7ff77a162970b30e;\n}();\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  var getDefaultWidth = props.getDefaultWidth,\n    getDefaultMinWidth = props.getDefaultMinWidth,\n    _props$tableWidth = props.tableWidth,\n    tableWidth = _props$tableWidth === void 0 ? 0 : _props$tableWidth;\n  var _ref9 = (0, $1BfjW$useState)(null),\n    _ref10 = _slicedToArray(_ref9, 2),\n    resizingColumn = _ref10[0],\n    setResizingColumn = _ref10[1];\n  var columnLayout = (0, $1BfjW$useMemo)(function () {\n    return new (0, $a9e7ae544a4e41dd$export$7ff77a162970b30e)({\n      getDefaultWidth: getDefaultWidth,\n      getDefaultMinWidth: getDefaultMinWidth\n    });\n  }, [getDefaultWidth, getDefaultMinWidth]);\n  var _ref11 = (0, $1BfjW$useMemo)(function () {\n      return columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns);\n    }, [state.collection.columns, columnLayout]),\n    _ref12 = _slicedToArray(_ref11, 2),\n    controlledColumns = _ref12[0],\n    uncontrolledColumns = _ref12[1];\n  // uncontrolled column widths\n  var _ref13 = (0, $1BfjW$useState)(function () {\n      return columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n    }),\n    _ref14 = _slicedToArray(_ref13, 2),\n    uncontrolledWidths = _ref14[0],\n    setUncontrolledWidths = _ref14[1];\n  // combine columns back into one map that maintains same order as the columns\n  var colWidths = (0, $1BfjW$useMemo)(function () {\n    return columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns);\n  }, [state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns, columnLayout]);\n  var startResize = (0, $1BfjW$useCallback)(function (key) {\n    setResizingColumn(key);\n  }, [setResizingColumn]);\n  var updateResizedColumns = (0, $1BfjW$useCallback)(function (key, width) {\n    var newControlled = new Map(Array.from(controlledColumns).map(function (_ref15) {\n      var _ref16 = _slicedToArray(_ref15, 2),\n        key = _ref16[0],\n        entry = _ref16[1];\n      return [key, entry.props.width];\n    }));\n    var newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);\n    var map = new Map(Array.from(uncontrolledColumns).map(function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 1),\n        key = _ref18[0];\n      return [key, newSizes.get(key)];\n    }));\n    map.set(key, width);\n    setUncontrolledWidths(map);\n    return newSizes;\n  }, [controlledColumns, uncontrolledColumns, setUncontrolledWidths, tableWidth, columnLayout, state.collection, uncontrolledWidths]);\n  var endResize = (0, $1BfjW$useCallback)(function () {\n    setResizingColumn(null);\n  }, [setResizingColumn]);\n  (0, $1BfjW$useMemo)(function () {\n    return columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths);\n  }, [tableWidth, state.collection, colWidths, columnLayout]);\n  return (0, $1BfjW$useMemo)(function () {\n    return {\n      resizingColumn: resizingColumn,\n      updateResizedColumns: updateResizedColumns,\n      startResize: startResize,\n      endResize: endResize,\n      getColumnWidth: function getColumnWidth(key) {\n        return columnLayout.getColumnWidth(key);\n      },\n      getColumnMinWidth: function getColumnMinWidth(key) {\n        return columnLayout.getColumnMinWidth(key);\n      },\n      getColumnMaxWidth: function getColumnMaxWidth(key) {\n        return columnLayout.getColumnMaxWidth(key);\n      },\n      tableState: state\n    };\n  }, [columnLayout, resizingColumn, updateResizedColumns, startResize, endResize, state]);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = \"row-header-column-\" + Math.random().toString(36).slice(2);\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = \"row-header-column-\" + Math.random().toString(36).slice(2);\nwhile ($788781baa30117fa$var$ROW_HEADER_COLUMN_KEY === $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG) $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = \"row-header-column-\" + Math.random().toString(36).slice(2);\nfunction $788781baa30117fa$export$7c127db850d4e81e(keyMap, columnNodes) {\n  if (columnNodes.length === 0) return [];\n  var columns = [];\n  var seen = new Map();\n  var _iterator = _createForOfIteratorHelper(columnNodes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _column = _step.value;\n      var parentKey = _column.parentKey;\n      var col = [_column];\n      while (parentKey) {\n        var parent = keyMap.get(parentKey);\n        if (!parent) break;\n        // If we've already seen this parent, than it is shared\n        // with a previous column. If the current column is taller\n        // than the previous column, than we need to shift the parent\n        // in the previous column so it's level with the current column.\n        if (seen.has(parent)) {\n          parent.colspan++;\n          var _seen$get = seen.get(parent),\n            _column2 = _seen$get.column,\n            index = _seen$get.index;\n          if (index > col.length) break;\n          for (var _i3 = index; _i3 < col.length; _i3++) _column2.splice(_i3, 0, null);\n          // Adjust shifted indices\n          for (var _i4 = col.length; _i4 < _column2.length; _i4++)\n          // eslint-disable-next-line max-depth\n          if (_column2[_i4] && seen.has(_column2[_i4])) seen.get(_column2[_i4]).index = _i4;\n        } else {\n          parent.colspan = 1;\n          col.push(parent);\n          seen.set(parent, {\n            column: col,\n            index: col.length - 1\n          });\n        }\n        parentKey = parent.parentKey;\n      }\n      columns.push(col);\n      _column.index = columns.length - 1;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  });\n  // Convert columns into rows.\n  var colIndex = 0;\n  for (var _i = 0, _columns = columns; _i < _columns.length; _i++) {\n    var column = _columns[_i];\n    var _i2 = maxLength - 1;\n    var _iterator2 = _createForOfIteratorHelper(column),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n        if (item) {\n          // Fill the space up until the current column with a placeholder\n          var row = headerRows[_i2];\n          var rowLength = row.reduce(function (p, c) {\n            return p + c.colspan;\n          }, 0);\n          if (rowLength < colIndex) {\n            var placeholder = {\n              type: \"placeholder\",\n              key: \"placeholder-\" + item.key,\n              colspan: colIndex - rowLength,\n              index: rowLength,\n              value: null,\n              rendered: null,\n              level: _i2,\n              hasChildNodes: false,\n              childNodes: [],\n              textValue: null\n            };\n            // eslint-disable-next-line max-depth\n            if (row.length > 0) {\n              row[row.length - 1].nextKey = placeholder.key;\n              placeholder.prevKey = row[row.length - 1].key;\n            }\n            row.push(placeholder);\n          }\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = item.key;\n            item.prevKey = row[row.length - 1].key;\n          }\n          item.level = _i2;\n          item.colIndex = colIndex;\n          row.push(item);\n        }\n        _i2--;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    colIndex++;\n  }\n  // Add placeholders at the end of each row that is shorter than the maximum\n  var i = 0;\n  var _iterator3 = _createForOfIteratorHelper(headerRows),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _row = _step3.value;\n      var _rowLength = _row.reduce(function (p, c) {\n        return p + c.colspan;\n      }, 0);\n      if (_rowLength < columnNodes.length) {\n        var _placeholder = {\n          type: \"placeholder\",\n          key: \"placeholder-\" + _row[_row.length - 1].key,\n          colspan: columnNodes.length - _rowLength,\n          index: _rowLength,\n          value: null,\n          rendered: null,\n          level: i,\n          hasChildNodes: false,\n          childNodes: [],\n          textValue: null,\n          prevKey: _row[_row.length - 1].key\n        };\n        _row.push(_placeholder);\n      }\n      i++;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: \"headerrow\",\n      key: \"headerrow-\" + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\nvar $788781baa30117fa$export$596e1b2e2cf93690 = /*#__PURE__*/function (_ref19, _Symbol$iterator) {\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _ref19);\n  var _super = _createSuper($788781baa30117fa$export$596e1b2e2cf93690);\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this5;\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: \"column\",\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: \"\",\n        level: 0,\n        index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n    // Add cell for drag buttons if needed.\n    if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {\n      var _rowHeaderColumn = {\n        type: \"column\",\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG,\n        value: null,\n        textValue: \"\",\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isDragButtonCell: true\n        }\n      };\n      columns.unshift(_rowHeaderColumn);\n    }\n    var rows = [];\n    var columnKeyMap = new Map();\n    var visit = function visit(node) {\n      switch (node.type) {\n        case \"body\":\n          body = node;\n          break;\n        case \"column\":\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n        case \"item\":\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n      var _iterator4 = _createForOfIteratorHelper(node.childNodes),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var child = _step4.value;\n          visit(child);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    };\n    var _iterator5 = _createForOfIteratorHelper(nodes),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var node = _step5.value;\n        visit(node);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    var headerRows = $788781baa30117fa$export$7c127db850d4e81e(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this5 = _super.call(this, {\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    _this5._size = 0;\n    _this5.columns = columns;\n    _this5.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this5.body = body;\n    _this5.headerRows = headerRows;\n    _this5._size = _toConsumableArray(body.childNodes).length;\n    // Default row header column to the first one.\n    if (_this5.rowHeaderColumnKeys.size === 0) {\n      if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n        if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) _this5.rowHeaderColumnKeys.add(_this5.columns[2].key);else _this5.rowHeaderColumnKeys.add(_this5.columns[1].key);\n      } else _this5.rowHeaderColumnKeys.add(_this5.columns[0].key);\n    }\n    return _this5;\n  }\n  _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(this.body.childNodes, \"t0\", 1);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var _getFirstItem;\n      return (_getFirstItem = (0, $1BfjW$getFirstItem)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var _getLastItem;\n      return (_getLastItem = (0, $1BfjW$getLastItem)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }, {\n    key: \"getTextValue\",\n    value: function getTextValue(key) {\n      var row = this.getItem(key);\n      if (!row) return \"\";\n      // If the row has a textValue, use that.\n      if (row.textValue) return row.textValue;\n      // Otherwise combine the text of each of the row header columns.\n      var rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n      if (rowHeaderColumnKeys) {\n        var text = [];\n        var _iterator6 = _createForOfIteratorHelper(row.childNodes),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var cell = _step6.value;\n            var column = this.columns[cell.index];\n            if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);\n            if (text.length === rowHeaderColumnKeys.size) break;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return text.join(\" \");\n      }\n      return \"\";\n    }\n  }]);\n  return $788781baa30117fa$export$596e1b2e2cf93690;\n}((0, $1BfjW$GridCollection), Symbol.iterator);\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: \"descending\",\n  descending: \"ascending\"\n};\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _ref20 = (0, $1BfjW$useState)(false),\n    _ref21 = _slicedToArray(_ref20, 2),\n    isKeyboardNavigationDisabled = _ref21[0],\n    setKeyboardNavigationDisabled = _ref21[1];\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? \"none\" : _props$selectionMode,\n    showSelectionCheckboxes = props.showSelectionCheckboxes,\n    showDragButtons = props.showDragButtons;\n  var context = (0, $1BfjW$useMemo)(function () {\n    return {\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  var collection = (0, $1BfjW$useCollection)(props, (0, $1BfjW$useCallback)(function (nodes) {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(nodes, null, context);\n  }, [context]), context);\n  var _ref22 = (0, $1BfjW$useGridState)(_objectSpread(_objectSpread({}, props), {}, {\n      collection: collection,\n      disabledBehavior: props.disabledBehavior || \"selection\"\n    })),\n    disabledKeys = _ref22.disabledKeys,\n    selectionManager = _ref22.selectionManager;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n    sort: function sort(columnKey, direction) {\n      var _props_sortDescriptor;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : \"ascending\"\n      });\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, columns, _iterator7, _step7, column, _columns2;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        children = props.children, columns = props.columns; // Clear columns so they aren't double added in strict mode.\n        context.columns = [];\n        if (!(typeof children === \"function\")) {\n          _context2.next = 24;\n          break;\n        }\n        if (columns) {\n          _context2.next = 5;\n          break;\n        }\n        throw new Error(\"props.children was a function but props.columns is missing\");\n      case 5:\n        _iterator7 = _createForOfIteratorHelper(columns);\n        _context2.prev = 6;\n        _iterator7.s();\n      case 8:\n        if ((_step7 = _iterator7.n()).done) {\n          _context2.next = 14;\n          break;\n        }\n        column = _step7.value;\n        _context2.next = 12;\n        return {\n          type: \"column\",\n          value: column,\n          renderer: children\n        };\n      case 12:\n        _context2.next = 8;\n        break;\n      case 14:\n        _context2.next = 19;\n        break;\n      case 16:\n        _context2.prev = 16;\n        _context2.t0 = _context2[\"catch\"](6);\n        _iterator7.e(_context2.t0);\n      case 19:\n        _context2.prev = 19;\n        _iterator7.f();\n        return _context2.finish(19);\n      case 22:\n        _context2.next = 27;\n        break;\n      case 24:\n        _columns2 = [];\n        (0, $1BfjW$react).Children.forEach(children, function (column) {\n          _columns2.push({\n            type: \"column\",\n            element: column\n          });\n        });\n        return _context2.delegateYield(_columns2, \"t1\", 27);\n      case 27:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, getCollectionNode, null, [[6, 16, 19, 22]]);\n});\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, items;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        children = props.children, items = props.items;\n        _context4.next = 3;\n        return {\n          type: \"body\",\n          hasChildNodes: true,\n          props: props,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator8, _step8, item, _items;\n            return _regeneratorRuntime().wrap(function childNodes$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!(typeof children === \"function\")) {\n                    _context3.next = 22;\n                    break;\n                  }\n                  if (items) {\n                    _context3.next = 3;\n                    break;\n                  }\n                  throw new Error(\"props.children was a function but props.items is missing\");\n                case 3:\n                  _iterator8 = _createForOfIteratorHelper(items);\n                  _context3.prev = 4;\n                  _iterator8.s();\n                case 6:\n                  if ((_step8 = _iterator8.n()).done) {\n                    _context3.next = 12;\n                    break;\n                  }\n                  item = _step8.value;\n                  _context3.next = 10;\n                  return {\n                    type: \"item\",\n                    value: item,\n                    renderer: children\n                  };\n                case 10:\n                  _context3.next = 6;\n                  break;\n                case 12:\n                  _context3.next = 17;\n                  break;\n                case 14:\n                  _context3.prev = 14;\n                  _context3.t0 = _context3[\"catch\"](4);\n                  _iterator8.e(_context3.t0);\n                case 17:\n                  _context3.prev = 17;\n                  _iterator8.f();\n                  return _context3.finish(17);\n                case 20:\n                  _context3.next = 25;\n                  break;\n                case 22:\n                  _items = [];\n                  (0, $1BfjW$react).Children.forEach(children, function (item) {\n                    _items.push({\n                      type: \"item\",\n                      element: item\n                    });\n                  });\n                  return _context3.delegateYield(_items, \"t1\", 25);\n                case 25:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, childNodes, null, [[4, 14, 17, 20]]);\n          })\n        };\n      case 3:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n$1cd244557c2f97d5$var$Column.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var title, children, childColumns, rendered, textValue, fullNodes, updateContext;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        title = props.title, children = props.children, childColumns = props.childColumns;\n        rendered = title || children;\n        textValue = props.textValue || (typeof rendered === \"string\" ? rendered : \"\") || props[\"aria-label\"];\n        _context6.next = 5;\n        return {\n          type: \"column\",\n          hasChildNodes: !!childColumns || title && (0, $1BfjW$react).Children.count(children) > 0,\n          rendered: rendered,\n          textValue: textValue,\n          props: props,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator9, _step9, child, _childColumns;\n            return _regeneratorRuntime().wrap(function childNodes$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (!childColumns) {\n                    _context5.next = 20;\n                    break;\n                  }\n                  _iterator9 = _createForOfIteratorHelper(childColumns);\n                  _context5.prev = 2;\n                  _iterator9.s();\n                case 4:\n                  if ((_step9 = _iterator9.n()).done) {\n                    _context5.next = 10;\n                    break;\n                  }\n                  child = _step9.value;\n                  _context5.next = 8;\n                  return {\n                    type: \"column\",\n                    value: child\n                  };\n                case 8:\n                  _context5.next = 4;\n                  break;\n                case 10:\n                  _context5.next = 15;\n                  break;\n                case 12:\n                  _context5.prev = 12;\n                  _context5.t0 = _context5[\"catch\"](2);\n                  _iterator9.e(_context5.t0);\n                case 15:\n                  _context5.prev = 15;\n                  _iterator9.f();\n                  return _context5.finish(15);\n                case 18:\n                  _context5.next = 24;\n                  break;\n                case 20:\n                  if (!title) {\n                    _context5.next = 24;\n                    break;\n                  }\n                  _childColumns = [];\n                  (0, $1BfjW$react).Children.forEach(children, function (child) {\n                    _childColumns.push({\n                      type: \"column\",\n                      element: child\n                    });\n                  });\n                  return _context5.delegateYield(_childColumns, \"t1\", 24);\n                case 24:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, childNodes, null, [[2, 12, 15, 18]]);\n          }),\n          shouldInvalidate: function shouldInvalidate(newContext) {\n            // This is a bit of a hack, but it works.\n            // If this method is called, then there's a cached version of this node available.\n            // But, we need to keep the list of columns in the new context up to date.\n            updateContext(newContext);\n            return false;\n          }\n        };\n      case 5:\n        fullNodes = _context6.sent;\n        updateContext = function updateContext(context) {\n          // register leaf columns on the context so that <Row> can access them\n          var _iterator10 = _createForOfIteratorHelper(fullNodes),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var node = _step10.value;\n              if (!node.hasChildNodes) context.columns.push(node);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        };\n        updateContext(context);\n      case 8:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, textValue, UNSTABLE_childItems;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        children = props.children, textValue = props.textValue, UNSTABLE_childItems = props.UNSTABLE_childItems;\n        _context8.next = 3;\n        return {\n          type: \"item\",\n          props: props,\n          textValue: textValue,\n          \"aria-label\": props[\"aria-label\"],\n          hasChildNodes: true,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator11, _step11, column, _iterator12, _step12, child, cells, childRows;\n            return _regeneratorRuntime().wrap(function childNodes$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (!context.showDragButtons) {\n                    _context7.next = 3;\n                    break;\n                  }\n                  _context7.next = 3;\n                  return {\n                    type: \"cell\",\n                    key: \"header-drag\",\n                    props: {\n                      isDragButtonCell: true\n                    }\n                  };\n                case 3:\n                  if (!(context.showSelectionCheckboxes && context.selectionMode !== \"none\")) {\n                    _context7.next = 6;\n                    break;\n                  }\n                  _context7.next = 6;\n                  return {\n                    type: \"cell\",\n                    key: \"header\",\n                    props: {\n                      isSelectionCell: true\n                    }\n                  };\n                case 6:\n                  if (!(typeof children === \"function\")) {\n                    _context7.next = 44;\n                    break;\n                  }\n                  _iterator11 = _createForOfIteratorHelper(context.columns);\n                  _context7.prev = 8;\n                  _iterator11.s();\n                case 10:\n                  if ((_step11 = _iterator11.n()).done) {\n                    _context7.next = 16;\n                    break;\n                  }\n                  column = _step11.value;\n                  _context7.next = 14;\n                  return {\n                    type: \"cell\",\n                    element: children(column.key),\n                    key: column.key // this is combined with the row key by CollectionBuilder\n                  };\n                case 14:\n                  _context7.next = 10;\n                  break;\n                case 16:\n                  _context7.next = 21;\n                  break;\n                case 18:\n                  _context7.prev = 18;\n                  _context7.t0 = _context7[\"catch\"](8);\n                  _iterator11.e(_context7.t0);\n                case 21:\n                  _context7.prev = 21;\n                  _iterator11.f();\n                  return _context7.finish(21);\n                case 24:\n                  if (!UNSTABLE_childItems) {\n                    _context7.next = 42;\n                    break;\n                  }\n                  _iterator12 = _createForOfIteratorHelper(UNSTABLE_childItems);\n                  _context7.prev = 26;\n                  _iterator12.s();\n                case 28:\n                  if ((_step12 = _iterator12.n()).done) {\n                    _context7.next = 34;\n                    break;\n                  }\n                  child = _step12.value;\n                  _context7.next = 32;\n                  return {\n                    type: \"item\",\n                    value: child\n                  };\n                case 32:\n                  _context7.next = 28;\n                  break;\n                case 34:\n                  _context7.next = 39;\n                  break;\n                case 36:\n                  _context7.prev = 36;\n                  _context7.t1 = _context7[\"catch\"](26);\n                  _iterator12.e(_context7.t1);\n                case 39:\n                  _context7.prev = 39;\n                  _iterator12.f();\n                  return _context7.finish(39);\n                case 42:\n                  _context7.next = 51;\n                  break;\n                case 44:\n                  cells = [];\n                  childRows = [];\n                  (0, $1BfjW$react).Children.forEach(children, function (node) {\n                    if (node.type === $70d70eb16ea48428$var$Row) {\n                      if (cells.length < context.columns.length) throw new Error(\"All of a Row's child Cells must be positioned before any child Rows.\");\n                      childRows.push({\n                        type: \"item\",\n                        element: node\n                      });\n                    } else cells.push({\n                      type: \"cell\",\n                      element: node\n                    });\n                  });\n                  if (!(cells.length !== context.columns.length)) {\n                    _context7.next = 49;\n                    break;\n                  }\n                  throw new Error(\"Cell count must match column count. Found \".concat(cells.length, \" cells and \").concat(context.columns.length, \" columns.\"));\n                case 49:\n                  return _context7.delegateYield(cells, \"t2\", 50);\n                case 50:\n                  return _context7.delegateYield(childRows, \"t3\", 51);\n                case 51:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, childNodes, null, [[8, 18, 21, 24], [26, 36, 39, 42]]);\n          }),\n          shouldInvalidate: function shouldInvalidate(newContext) {\n            // Invalidate all rows if the columns changed.\n            return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n              return c.key !== context.columns[i].key;\n            }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;\n          }\n        };\n      case 3:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n$941d1d9a6a28982a$var$Cell.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        children = props.children;\n        textValue = props.textValue || (typeof children === \"string\" ? children : \"\") || props[\"aria-label\"] || \"\";\n        _context9.next = 4;\n        return {\n          type: \"cell\",\n          props: props,\n          rendered: children,\n          textValue: textValue,\n          \"aria-label\": props[\"aria-label\"],\n          hasChildNodes: false\n        };\n      case 4:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ee65a0057fd99531$export$34dfa8a1622185a4(props) {\n  var _props$selectionMode2 = props.selectionMode,\n    selectionMode = _props$selectionMode2 === void 0 ? \"none\" : _props$selectionMode2,\n    showSelectionCheckboxes = props.showSelectionCheckboxes,\n    showDragButtons = props.showDragButtons,\n    propExpandedKeys = props.UNSTABLE_expandedKeys,\n    propDefaultExpandedKeys = props.UNSTABLE_defaultExpandedKeys,\n    UNSTABLE_onExpandedChange = props.UNSTABLE_onExpandedChange,\n    children = props.children;\n  if (!(0, $1BfjW$tableNestedRows)()) throw new Error(\"Feature flag for table nested rows must be enabled to use useTreeGridState.\");\n  var _ref23 = (0, $1BfjW$useControlledState)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : undefined, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : new Set(), UNSTABLE_onExpandedChange),\n    _ref24 = _slicedToArray(_ref23, 2),\n    expandedKeys = _ref24[0],\n    setExpandedKeys = _ref24[1];\n  var context = (0, $1BfjW$useMemo)(function () {\n    return {\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  var builder = (0, $1BfjW$useMemo)(function () {\n    return new (0, $1BfjW$CollectionBuilder)();\n  }, []);\n  var nodes = (0, $1BfjW$useMemo)(function () {\n    return builder.build({\n      children: children\n    }, context);\n  }, [builder, children, context]);\n  var treeGridCollection = (0, $1BfjW$useMemo)(function () {\n    return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {\n      showSelectionCheckboxes: showSelectionCheckboxes,\n      showDragButtons: showDragButtons,\n      expandedKeys: expandedKeys\n    });\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n  var onToggle = function onToggle(key) {\n    setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));\n  };\n  var collection = (0, $1BfjW$useMemo)(function () {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n  var tableState = (0, $4a0dd036d492cee4$export$907bcc6c48325fd6)(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection\n  }));\n  return _objectSpread(_objectSpread({}, tableState), {}, {\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys: expandedKeys,\n    toggleKey: onToggle\n  });\n}\nfunction $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {\n  var updatedExpandedKeys;\n  if (currentExpandedKeys === \"all\") {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(function (row) {\n      return row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount;\n    }).map(function (row) {\n      return row.key;\n    }));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) updatedExpandedKeys.delete(key);else updatedExpandedKeys.add(key);\n  }\n  return updatedExpandedKeys;\n}\nfunction $ee65a0057fd99531$var$convertExpanded(expanded) {\n  if (!expanded) return new Set();\n  return expanded === \"all\" ? \"all\" : new Set(expanded);\n}\nfunction $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {\n  var _opts$expandedKeys = opts.expandedKeys,\n    expandedKeys = _opts$expandedKeys === void 0 ? new Set() : _opts$expandedKeys;\n  var body;\n  var flattenedRows = [];\n  var columnCount = 0;\n  var userColumnCount = 0;\n  var originalColumns = [];\n  var keyMap = new Map();\n  if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) columnCount++;\n  if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) columnCount++;\n  var topLevelRows = [];\n  var visit = function visit(node) {\n    switch (node.type) {\n      case \"body\":\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case \"column\":\n        if (!node.hasChildNodes) userColumnCount++;\n        break;\n      case \"item\":\n        topLevelRows.push(node);\n        return;\n    }\n    var _iterator13 = _createForOfIteratorHelper(node.childNodes),\n      _step13;\n    try {\n      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n        var child = _step13.value;\n        visit(child);\n      }\n    } catch (err) {\n      _iterator13.e(err);\n    } finally {\n      _iterator13.f();\n    }\n  };\n  var _iterator14 = _createForOfIteratorHelper(nodes),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var node = _step14.value;\n      if (node.type === \"column\") originalColumns.push(node);\n      visit(node);\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  columnCount += userColumnCount;\n  // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n  var globalRowCount = 0;\n  var visitNode = function visitNode(node, i) {\n    // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n    // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n    // values automatically calculated via CollectionBuilder\n    if (node.type === \"item\") {\n      var _childNodes = [];\n      var _iterator15 = _createForOfIteratorHelper(node.childNodes),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var child = _step15.value;\n          if (child.type === \"cell\") {\n            var cellClone = _objectSpread({}, child);\n            if (cellClone.index + 1 === columnCount) cellClone.nextKey = null;\n            _childNodes.push(_objectSpread({}, cellClone));\n          }\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        childNodes: _childNodes,\n        parentKey: body.key,\n        level: 1,\n        index: globalRowCount++\n      });\n      flattenedRows.push(clone);\n    }\n    var newProps = {};\n    // Assign indexOfType to cells and rows for aria-posinset\n    if (node.type !== \"placeholder\" && node.type !== \"column\") newProps[\"indexOfType\"] = i;\n    // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n    // via .childNodes returns the same object as the one found via keyMap look up\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n    var lastNode;\n    var rowIndex = 0;\n    var _iterator16 = _createForOfIteratorHelper(node.childNodes),\n      _step16;\n    try {\n      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n        var _child = _step16.value;\n        if (!(_child.type === \"item\" && expandedKeys !== \"all\" && !expandedKeys.has(node.key))) {\n          if (_child.parentKey == null)\n            // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n            _child.parentKey = node.key;\n          if (lastNode) {\n            lastNode.nextKey = _child.key;\n            _child.prevKey = lastNode.key;\n          } else _child.prevKey = null;\n          if (_child.type === \"item\") visitNode(_child, rowIndex++);else\n            // We enforce that the cells come before rows so can just reuse cell index\n            visitNode(_child, _child.index);\n          lastNode = _child;\n        }\n      }\n    } catch (err) {\n      _iterator16.e(err);\n    } finally {\n      _iterator16.f();\n    }\n    if (lastNode) lastNode.nextKey = null;\n  };\n  var last;\n  topLevelRows.forEach(function (node, i) {\n    visitNode(node, i);\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else node.prevKey = null;\n    last = node;\n  });\n  if (last) last.nextKey = null;\n  return {\n    keyMap: keyMap,\n    userColumnCount: userColumnCount,\n    flattenedRows: flattenedRows,\n    tableNodes: [].concat(originalColumns, [_objectSpread(_objectSpread({}, body), {}, {\n      childNodes: flattenedRows\n    })])\n  };\n}\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section, $788781baa30117fa$export$596e1b2e2cf93690 as TableCollection, $788781baa30117fa$export$7c127db850d4e81e as buildHeaderRows, $a9e7ae544a4e41dd$export$7ff77a162970b30e as TableColumnLayout, $ee65a0057fd99531$export$34dfa8a1622185a4 as UNSTABLE_useTreeGridState };","map":{"version":3,"names":["$6818b1c4fc67028d$export$1994a077b98ee0d5","width","isNaN","String","match","$6818b1c4fc67028d$export$9078bad4c3934604","console","warn","concat","parseFloat","$6818b1c4fc67028d$export$7bbad27896f7ae9f","tableWidth","Error","$6818b1c4fc67028d$export$59185c62a7544aa0","maxWidth","Number","MAX_SAFE_INTEGER","$6818b1c4fc67028d$export$f556054ce4358701","minWidth","$6818b1c4fc67028d$export$55d50dc687385491","availableWidth","columns","changedColumns","getDefaultWidth","getDefaultMinWidth","hasNonFrozenItems","flexItems","map","column","index","_column_width","_ref","_ref1","get","key","defaultWidth","frozen","baseSize","flex","targetMainSize","_column_minWidth","_ref2","min","max","hypotheticalMainSize","Math","violation","_loop","usedWidth","flexFactors","forEach","item","remainingFreeSpace","ratio","totalViolation","sign","$6818b1c4fc67028d$var$cascadeRounding","fpTotal","intTotal","roundedArray","float","integer","round","push","$a9e7ae544a4e41dd$export$7ff77a162970b30e","options","_classCallCheck","columnWidths","Map","columnMinWidths","columnMaxWidths","_options_getDefaultWidth","_options_getDefaultMinWidth","_createClass","value","splitColumnsIntoControlledAndUncontrolled","reduce","acc","col","props","set","recombineColumns","uncontrolledWidths","uncontrolledColumns","controlledColumns","has","getInitialUncontrolledWidths","_this2","_col_props_defaultWidth","Array","from","_ref3","_ref4","_slicedToArray","_this","_this_getDefaultWidth","call","getColumnWidth","_this_columnWidths_get","getColumnMinWidth","getColumnMaxWidth","resizeColumnWidth","collection","controlledWidths","_this3","arguments","length","undefined","prevColumnWidths","resizeIndex","Infinity","resizingChanged","_toConsumableArray","percentKeys","frKeysToTheRight","minWidths","i","_column_props_width","_column_props_width_endsWith","frKey","frValue","endsWith","floor","_objectSpread","newWidths","_ref5","_ref6","_ref7","_ref8","buildColumnWidths","widths","_this4","_column_props_minWidth","$292bc4e09cd0eb62$export$cb895dcf85db1319","state","_props$tableWidth","_ref9","$1BfjW$useState","_ref10","resizingColumn","setResizingColumn","columnLayout","$1BfjW$useMemo","_ref11","_ref12","_ref13","_ref14","setUncontrolledWidths","colWidths","startResize","$1BfjW$useCallback","updateResizedColumns","newControlled","_ref15","_ref16","entry","newSizes","_ref17","_ref18","endResize","tableState","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","random","toString","slice","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG","$788781baa30117fa$export$7c127db850d4e81e","keyMap","columnNodes","seen","_iterator","_createForOfIteratorHelper","_step","s","n","done","parentKey","parent","colspan","_seen$get","splice","err","e","f","maxLength","apply","c","headerRows","fill","colIndex","_i","_columns","_iterator2","_step2","row","rowLength","p","placeholder","type","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","_iterator3","_step3","$788781baa30117fa$export$596e1b2e2cf93690","_ref19","_Symbol$iterator","_inherits","_super","_createSuper","nodes","prev","opts","_this5","rowHeaderColumnKeys","Set","body","showSelectionCheckboxes","rowHeaderColumn","showDragButtons","isSelectionCell","unshift","isDragButtonCell","rows","columnKeyMap","visit","node","isRowHeader","add","_iterator4","_step4","child","_iterator5","_step5","columnCount","items","visitNode","_size","size","_regeneratorRuntime","mark","wrap","value$","_context","next","delegateYield","stop","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","_getFirstItem","$1BfjW$getFirstItem","getLastKey","_getLastItem","$1BfjW$getLastItem","getItem","at","idx","getTextValue","text","_iterator6","_step6","cell","join","$1BfjW$GridCollection","Symbol","iterator","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","_ref20","_ref21","isKeyboardNavigationDisabled","setKeyboardNavigationDisabled","_props$selectionMode","selectionMode","context","children","$1BfjW$useCollection","_ref22","$1BfjW$useGridState","disabledBehavior","disabledKeys","selectionManager","sortDescriptor","sort","columnKey","direction","_props_sortDescriptor","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","_iterator7","_step7","_columns2","getCollectionNode$","_context2","renderer","t0","finish","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","_context4","_iterator8","_step8","_items","childNodes$","_context3","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","title","childColumns","fullNodes","updateContext","_context6","count","_iterator9","_step9","_childColumns","_context5","shouldInvalidate","newContext","sent","_iterator10","_step10","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","UNSTABLE_childItems","_context8","_iterator11","_step11","_iterator12","_step12","cells","childRows","_context7","t1","some","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","_context9","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea","$ee65a0057fd99531$export$34dfa8a1622185a4","_props$selectionMode2","propExpandedKeys","UNSTABLE_expandedKeys","propDefaultExpandedKeys","UNSTABLE_defaultExpandedKeys","UNSTABLE_onExpandedChange","$1BfjW$tableNestedRows","_ref23","$1BfjW$useControlledState","$ee65a0057fd99531$var$convertExpanded","_ref24","expandedKeys","setExpandedKeys","builder","$1BfjW$CollectionBuilder","build","treeGridCollection","$ee65a0057fd99531$var$generateTreeGridCollection","onToggle","$ee65a0057fd99531$var$toggleKey","tableNodes","userColumnCount","toggleKey","currentExpandedKeys","updatedExpandedKeys","flattenedRows","filter","delete","expanded","_opts$expandedKeys","originalColumns","topLevelRows","_iterator13","_step13","_iterator14","_step14","globalRowCount","_iterator15","_step15","cellClone","clone","newProps","Object","assign","lastNode","rowIndex","_iterator16","_step16","last"],"sources":["/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/index.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTableColumnResizeState.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableColumnLayout.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableUtils.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTableState.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableCollection.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableHeader.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableBody.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Column.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Row.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Cell.ts","/Users/elisabjorg/Documents/my-app/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTreeGridState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {TableColumnResizeState, TableColumnResizeStateProps} from './useTableColumnResizeState';\nexport type {TableState, CollectionBuilderContext, TableStateProps} from './useTableState';\nexport type {TableHeaderProps, TableBodyProps, ColumnProps, RowProps, CellProps} from '@react-types/table';\nexport type {TreeGridState, TreeGridStateProps} from './useTreeGridState';\n\nexport {useTableColumnResizeState} from './useTableColumnResizeState';\nexport {useTableState} from './useTableState';\nexport {TableHeader} from './TableHeader';\nexport {TableBody} from './TableBody';\nexport {Column} from './Column';\nexport {Row} from './Row';\nexport {Cell} from './Cell';\nexport {Section} from '@react-stately/collections';\nexport {TableCollection, buildHeaderRows} from './TableCollection';\nexport {TableColumnLayout} from './TableColumnLayout';\nexport {UNSTABLE_useTreeGridState} from './useTreeGridState';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnSize} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key, useCallback, useMemo, useState} from 'react';\nimport {TableColumnLayout} from './TableColumnLayout';\nimport {TableState} from './useTableState';\n\nexport interface TableColumnResizeStateProps<T> {\n  /**\n   * Current width of the table or table viewport that the columns\n   * should be calculated against.\n   */\n  tableWidth: number,\n  /** A function that is called to find the default width for a given column. */\n  getDefaultWidth?: (node: GridNode<T>) => ColumnSize | null | undefined,\n  /** A function that is called to find the default minWidth for a given column. */\n  getDefaultMinWidth?: (node: GridNode<T>) => ColumnSize | null | undefined\n}\nexport interface TableColumnResizeState<T> {\n  /**\n   * Called to update the state that a resize event has occurred.\n   * Returns the new widths for all columns based on the resized column.\n   */\n  updateResizedColumns: (key: Key, width: number) => Map<Key, ColumnSize>,\n  /** Callback for when onColumnResize has started. */\n  startResize: (key: Key) => void,\n  /** Callback for when onColumnResize has ended. */\n  endResize: () => void,\n  /** Gets the current width for the specified column. */\n  getColumnWidth: (key: Key) => number,\n  /** Gets the current minWidth for the specified column. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Gets the current maxWidth for the specified column. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of the currently resizing column. */\n  resizingColumn: Key | null,\n  /** A reference to the table state. */\n  tableState: TableState<T>\n}\n\n/**\n * Provides column width state management for a table component with column resizing support. Handles building\n * a map of column widths calculated from the table's width and any provided column width information from the collection.\n * In addition, it tracks the currently resizing column and provides callbacks for updating the widths upon resize operations.\n * @param props - Props for the table.\n * @param state - State for the table, as returned by `useTableState`.\n */\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps<T>, state: TableState<T>): TableColumnResizeState<T> {\n  let {\n    getDefaultWidth,\n    getDefaultMinWidth,\n    tableWidth = 0\n  } = props;\n\n  let [resizingColumn, setResizingColumn] = useState<Key | null>(null);\n  let columnLayout = useMemo(\n    () => new TableColumnLayout({\n      getDefaultWidth,\n      getDefaultMinWidth\n    }),\n    [getDefaultWidth, getDefaultMinWidth]\n  );\n\n  let [controlledColumns, uncontrolledColumns] = useMemo(() =>\n      columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns)\n  , [state.collection.columns, columnLayout]);\n\n  // uncontrolled column widths\n  let [uncontrolledWidths, setUncontrolledWidths] = useState(() =>\n    columnLayout.getInitialUncontrolledWidths(uncontrolledColumns)\n  );\n  // combine columns back into one map that maintains same order as the columns\n  let colWidths = useMemo(() =>\n      columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns)\n  , [state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns, columnLayout]);\n\n  let startResize = useCallback((key: Key) => {\n    setResizingColumn(key);\n  }, [setResizingColumn]);\n\n  let updateResizedColumns = useCallback((key: Key, width: number): Map<Key, ColumnSize> => {\n    let newControlled = new Map(Array.from(controlledColumns).map(([key, entry]) => [key, entry.props.width]));\n    let newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);\n\n    let map = new Map(Array.from(uncontrolledColumns).map(([key]) => [key, newSizes.get(key)]));\n    map.set(key, width);\n    setUncontrolledWidths(map);\n    return newSizes;\n  }, [controlledColumns, uncontrolledColumns, setUncontrolledWidths, tableWidth, columnLayout, state.collection, uncontrolledWidths]);\n\n  let endResize = useCallback(() => {\n    setResizingColumn(null);\n  }, [setResizingColumn]);\n\n  useMemo(() =>\n    columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths)\n  , [tableWidth, state.collection, colWidths, columnLayout]);\n\n  return useMemo(() => ({\n    resizingColumn,\n    updateResizedColumns,\n    startResize,\n    endResize,\n    getColumnWidth: (key: Key) =>\n      columnLayout.getColumnWidth(key),\n    getColumnMinWidth: (key: Key) =>\n      columnLayout.getColumnMinWidth(key),\n    getColumnMaxWidth: (key: Key) =>\n      columnLayout.getColumnMaxWidth(key),\n    tableState: state\n  }), [\n    columnLayout,\n    resizingColumn,\n    updateResizedColumns,\n    startResize,\n    endResize,\n    state\n  ]);\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  calculateColumnSizes,\n  getMaxWidth,\n  getMinWidth,\n  isStatic,\n  parseFractionalUnit\n} from './TableUtils';\nimport {ColumnSize, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\nexport interface TableColumnLayoutOptions<T> {\n  getDefaultWidth?: (column: GridNode<T>) => ColumnSize | null | undefined,\n  getDefaultMinWidth?: (column: GridNode<T>) => ColumnSize | null | undefined\n}\n\nexport class TableColumnLayout<T> {\n  getDefaultWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  getDefaultMinWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  columnWidths: Map<Key, number> = new Map();\n  columnMinWidths: Map<Key, number> = new Map();\n  columnMaxWidths: Map<Key, number> = new Map();\n\n  constructor(options: TableColumnLayoutOptions<T>) {\n    this.getDefaultWidth = options?.getDefaultWidth ?? (() => '1fr');\n    this.getDefaultMinWidth = options?.getDefaultMinWidth ?? (() => 75);\n  }\n\n  /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */\n  splitColumnsIntoControlledAndUncontrolled(columns: Array<GridNode<T>>): [Map<Key, GridNode<T>>, Map<Key, GridNode<T>>] {\n    return columns.reduce((acc, col) => {\n      if (col.props.width != null) {\n        acc[0].set(col.key, col);\n      } else {\n        acc[1].set(col.key, col);\n      }\n      return acc;\n    }, [new Map(), new Map()]);\n  }\n\n  /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  recombineColumns(columns: Array<GridNode<T>>, uncontrolledWidths: Map<Key, ColumnSize>, uncontrolledColumns: Map<Key, GridNode<T>>, controlledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(columns.map(col => {\n      if (uncontrolledColumns.has(col.key)) {\n        return [col.key, uncontrolledWidths.get(col.key)];\n      } else {\n        return [col.key, controlledColumns.get(col.key).props.width];\n      }\n    }));\n  }\n\n  /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  getInitialUncontrolledWidths(uncontrolledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(Array.from(uncontrolledColumns).map(([key, col]) =>\n      [key, col.props.defaultWidth ?? this.getDefaultWidth?.(col) ?? '1fr']\n    ));\n  }\n\n  getColumnWidth(key: Key): number {\n    return this.columnWidths.get(key) ?? 0;\n  }\n\n  getColumnMinWidth(key: Key): number {\n    return this.columnMinWidths.get(key);\n  }\n\n  getColumnMaxWidth(key: Key): number {\n    return this.columnMaxWidths.get(key);\n  }\n\n  resizeColumnWidth(tableWidth: number, collection: TableCollection<T>, controlledWidths: Map<Key, ColumnSize>, uncontrolledWidths: Map<Key, ColumnSize>, col = null, width: number): Map<Key, ColumnSize> {\n    let prevColumnWidths = this.columnWidths;\n    // resizing a column\n    let resizeIndex = Infinity;\n    let resizingChanged = new Map<Key, ColumnSize>([...controlledWidths, ...uncontrolledWidths]);\n    let percentKeys = new Map();\n    let frKeysToTheRight = new Map();\n    let minWidths = new Map();\n    // freeze columns to the left to their previous pixel value\n    collection.columns.forEach((column, i) => {\n      let frKey;\n      let frValue;\n      minWidths.set(column.key, this.getDefaultMinWidth(collection.columns[i]));\n      if (col !== column.key && !column.props.width && !isStatic(uncontrolledWidths.get(column.key))) {\n        // uncontrolled don't have props.width for us, so instead get from our state\n        frKey = column.key;\n        frValue = parseFractionalUnit(uncontrolledWidths.get(column.key) as string);\n      } else if (col !== column.key && !isStatic(column.props.width) && !uncontrolledWidths.get(column.key)) {\n        // controlledWidths will be the same in the collection\n        frKey = column.key;\n        frValue = parseFractionalUnit(column.props.width);\n      } else if (col !== column.key && column.props.width?.endsWith?.('%')) {\n        percentKeys.set(column.key, column.props.width);\n      }\n      // don't freeze columns to the right of the resizing one\n      if (resizeIndex < i) {\n        if (frKey) {\n          frKeysToTheRight.set(frKey, frValue);\n        }\n        return;\n      }\n      // we already know the new size of the resizing column\n      if (column.key === col) {\n        resizeIndex = i;\n        resizingChanged.set(column.key, Math.floor(width));\n        return;\n      }\n      // freeze column to previous value\n      resizingChanged.set(column.key, prevColumnWidths.get(column.key));\n    });\n\n    // predict pixels sizes for all columns based on resize\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      resizingChanged,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // set all new column widths for onResize event\n    // columns going in will be the same order as the columns coming out\n    let newWidths = new Map<Key, ColumnSize>();\n    // set all column widths based on calculateColumnSize\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      newWidths.set(key, width);\n    });\n\n    // add FR's back as they were to columns to the right\n    Array.from(frKeysToTheRight).forEach(([key]) => {\n      newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);\n    });\n\n    // put back in percents\n    Array.from(percentKeys).forEach(([key, width]) => {\n      // resizing locks a column to a px width\n      if (key === col) {\n        return;\n      }\n      newWidths.set(key, width);\n    });\n    return newWidths;\n  }\n\n  buildColumnWidths(tableWidth: number, collection: TableCollection<T>, widths: Map<Key, ColumnSize>) {\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n\n    // initial layout or table/window resizing\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      widths,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // columns going in will be the same order as the columns coming out\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      let column = collection.columns[index];\n      this.columnWidths.set(key, width);\n      this.columnMinWidths.set(key, getMinWidth(column.props.minWidth ?? this.getDefaultMinWidth(column), tableWidth));\n      this.columnMaxWidths.set(key, getMaxWidth(column.props.maxWidth, tableWidth));\n    });\n    return this.columnWidths;\n  }\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnSize} from '@react-types/table';\nimport {Key} from 'react';\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nexport function parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  }\n  let match = width.match(/^(.+)(?=fr$)/);\n  // if width is the incorrect format, just default it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`,\n      'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseFloat(match[0]);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseFloat(match[0]) / 100);\n  }\n  return width;\n}\n\n\nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n    ? parseStaticWidth(maxWidth, tableWidth)\n    : Number.MAX_SAFE_INTEGER;\n}\n\n// cannot support FR units, we'd need to know everything else in the table to do that\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n    ? parseStaticWidth(minWidth, tableWidth)\n    : 0;\n}\n\n\nexport interface IColumn {\n  minWidth?: number | string,\n  maxWidth?: number | string,\n  width?: number | string,\n  defaultWidth?: number | string,\n  key?: Key\n}\n\n/**\n * Implements the flex algorithm described in https://www.w3.org/TR/css-flexbox-1/#layout-algorithm\n * It makes a few constraint/assumptions:\n * 1. All basis values are 0 unless it is a static width, then the basis is the static width\n * 2. All flex grow and shrink values are equal to the FR specified on the column, grow and shrink for the same column are equal\n * 3. We only have one row\n * An example of the setup can be seen here https://jsfiddle.net/snowystinger/wv0ymjaf/61/ where I let the browser figure out the\n * flex of the columns.\n * Note: We differ in one key aspect, all of our column widths must be whole numbers, so we avoid browser\n * sub pixel rounding errors. To do this, we use a cascading rounding algorithm to ensure that the sum of the widths is maintained\n * while distributing the rounding remainder across the columns.\n *\n * As noted in the chrome source code, this algorithm is very accurate, but has the potential to be quadratic.\n * They have deemed this to be acceptable because the number of elements is usually small and the flex factors\n * are usually not high variance. I believe we can make the same assumptions. Particularly once resizing is\n * started, it will convert all columns to the left to static widths, so it will cut down on the number of FR columns.\n *\n * There are likely faster ways to do this, I've chosen to stick to the spec as closely as possible for readability, accuracy, and for the\n * note that this behaving quadratically is unlikely to be a problem.\n * @param availableWidth - The visible width of the table.\n * @param columns - The table defined columns.\n * @param changedColumns - Any columns we want to override, for example, during resizing.\n * @param getDefaultWidth - A function that returns the default width of a column by its index.\n * @param getDefaultMinWidth - A function that returns the default min width of a column by its index.\n */\nexport function calculateColumnSizes(availableWidth: number, columns: IColumn[], changedColumns: Map<Key, ColumnSize>, getDefaultWidth, getDefaultMinWidth) {\n  let hasNonFrozenItems = false;\n  let flexItems = columns.map((column, index) => {\n    let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : column.width ?? column.defaultWidth ?? getDefaultWidth?.(index) ?? '1fr';\n    let frozen = false;\n    let baseSize = 0;\n    let flex = 0;\n    let targetMainSize = null;\n    if (isStatic(width)) {\n      baseSize = parseStaticWidth(width, availableWidth);\n      frozen = true;\n    } else {\n      flex = parseFractionalUnit(width);\n      if (flex <= 0) {\n        frozen = true;\n      }\n    }\n\n    let min = getMinWidth(column.minWidth ?? getDefaultMinWidth?.(index) ?? 0, availableWidth);\n    let max = getMaxWidth(column.maxWidth, availableWidth);\n    let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n\n    // 9.7.1\n    // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.\n    // 9.7.2\n    if (frozen) {\n      targetMainSize = hypotheticalMainSize;\n    } else if (baseSize > hypotheticalMainSize) {\n      frozen = true;\n      targetMainSize = hypotheticalMainSize;\n    }\n\n    // 9.7.3\n    if (!frozen) {\n      hasNonFrozenItems = true;\n    }\n    return {\n      frozen,\n      baseSize,\n      hypotheticalMainSize,\n      min,\n      max,\n      flex,\n      targetMainSize,\n      violation: 0\n    };\n  });\n\n  // 9.7.4\n  // 9.7.4.a\n  while (hasNonFrozenItems) {\n    // 9.7.4.b\n    /**\n     * Calculate the remaining free space as for initial free space,\n     * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is\n     * less than one, multiply the initial free space by this sum (of flex factors).\n     * If the magnitude of this value is less than the magnitude of\n     * the remaining free space, use this as the remaining free space.\n     */\n    let usedWidth = 0;\n    let flexFactors = 0;\n    flexItems.forEach(item => {\n      if (item.frozen) {\n        usedWidth += item.targetMainSize;\n      } else {\n        usedWidth += item.baseSize;\n        flexFactors += item.flex;\n      }\n    });\n\n    let remainingFreeSpace = availableWidth - usedWidth;\n    // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0\n    // so no need to check for flexFactors < 1\n    // 9.7.4.c\n    /**\n     * If the remaining free space is zero\n     * - Do nothing.\n     * Else // remember, we're always in grow mode\n     * - Find the ratio of the item’s flex grow factor to the\n     * sum of the flex grow factors of all unfrozen items on\n     * the line. Set the item’s target main size to its flex\n     * base size plus a fraction of the remaining free space\n     * proportional to the ratio.\n     */\n    if (remainingFreeSpace > 0) {\n      flexItems.forEach((item) => {\n        if (!item.frozen) {\n          let ratio = item.flex / flexFactors;\n          item.targetMainSize = item.baseSize + (ratio * remainingFreeSpace);\n        }\n      });\n    }\n\n    // 9.7.4.d\n    /**\n     * Fix min/max violations. Clamp each non-frozen item’s\n     * target main size by its used min and max main sizes\n     * and floor its content-box size at zero. If the item’s\n     * target main size was made smaller by this, it’s a max\n     * violation. If the item’s target main size was made\n     * larger by this, it’s a min violation.\n     */\n    let totalViolation = 0;\n    flexItems.forEach(item => {\n      item.violation = 0;\n      if (!item.frozen) {\n        let {min, max, targetMainSize} = item;\n        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n\n        item.violation = item.targetMainSize - targetMainSize;\n        totalViolation += item.violation;\n      }\n    });\n\n    // 9.7.4.e\n    /**\n     * Freeze over-flexed items. The total violation is the\n     * sum of the adjustments from the previous step\n     * ∑(clamped size - unclamped size). If the total violation is:\n     * Zero\n     * - Freeze all items.\n     *\n     * Positive\n     * - Freeze all the items with min violations.\n     *\n     * Negative\n     * - Freeze all the items with max violations.\n     */\n    hasNonFrozenItems = false;\n    flexItems.forEach(item => {\n      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) {\n        item.frozen = true;\n      } else if (!item.frozen) {\n        hasNonFrozenItems = true;\n      }\n    });\n  }\n\n  return cascadeRounding(flexItems);\n}\n\nfunction cascadeRounding(flexItems): number[] {\n  /*\n  Given an array of floats that sum to an integer, this rounds the floats\n  and returns an array of integers with the same sum.\n  */\n\n  let fpTotal = 0;\n  let intTotal = 0;\n  let roundedArray = [];\n  flexItems.forEach(function (item) {\n    let float = item.targetMainSize;\n    let integer = Math.round(float + fpTotal) - intTotal;\n    fpTotal += float;\n    intTotal += integer;\n    roundedArray.push(integer);\n  });\n\n  return roundedArray;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection, TableBodyProps, TableHeaderProps} from '@react-types/table';\nimport {Key, ReactElement, useCallback, useMemo, useState} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  showDragButtons: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends MultipleSelectionStateProps, Sortable {\n  /** The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows. */\n  children?: [ReactElement<TableHeaderProps<T>>, ReactElement<TableBodyProps<T>>],\n  /** A list of row keys to disable. */\n  disabledKeys?: Iterable<Key>,\n  /** A pre-constructed collection to use instead of building one from items and children. */\n  collection?: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean,\n  /** Whether the row drag button should be displayed.\n   * @private\n   */\n  showDragButtons?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none', showSelectionCheckboxes, showDragButtons} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n    showDragButtons: showDragButtons,\n    selectionMode,\n    columns: []\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [props.children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n\n  let collection = useCollection<T, ITableCollection<T>>(\n    props,\n    useCallback((nodes) => new TableCollection(nodes, null, context), [context]),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({\n    ...props,\n    collection,\n    disabledBehavior: props.disabledBehavior || 'selection'\n  });\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {getFirstItem, getLastItem} from '@react-stately/collections';\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean,\n  showDragButtons?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\nlet ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);\nwhile (ROW_HEADER_COLUMN_KEY === ROW_HEADER_COLUMN_KEY_DRAG) {\n  ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);\n}\n\n/** @private */\nexport function buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  if (columnNodes.length === 0) {\n    return [];\n  }\n\n  let columns: GridNode<T>[][] = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n      if (!parent) {\n        break;\n      }\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          // eslint-disable-next-line max-depth\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          // eslint-disable-next-line max-depth\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> implements ITableCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n  _size: number = 0;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: ITableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns: GridNode<T>[] = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: opts?.showDragButtons ? 1 : 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    // Add cell for drag buttons if needed.\n    if (opts?.showDragButtons) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY_DRAG,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isDragButtonCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n    this._size = [...body.childNodes].length;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      if (opts?.showSelectionCheckboxes) {\n        if (opts?.showDragButtons) {\n          this.rowHeaderColumnKeys.add(this.columns[2].key);\n        } else {\n          this.rowHeaderColumnKeys.add(this.columns[1].key);\n        }\n      } else {\n        this.rowHeaderColumnKeys.add(this.columns[0].key);\n      }\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return getFirstItem(this.body.childNodes)?.key;\n  }\n\n  getLastKey() {\n    return getLastItem(this.body.childNodes)?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  getTextValue(key: Key): string {\n    let row = this.getItem(key);\n    if (!row) {\n      return '';\n    }\n\n    // If the row has a textValue, use that.\n    if (row.textValue) {\n      return row.textValue;\n    }\n\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    if (rowHeaderColumnKeys) {\n      let text = [];\n      for (let cell of row.childNodes) {\n        let column = this.columns[cell.index];\n        if (rowHeaderColumnKeys.has(column.key) && cell.textValue) {\n          text.push(cell.textValue);\n        }\n\n        if (text.length === rowHeaderColumnKeys.size) {\n          break;\n        }\n      }\n\n      return text.join(' ');\n    }\n\n    return '';\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n\n  // Clear columns so they aren't double added in strict mode.\n  context.columns = [];\n\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row<T>(props: RowProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue, UNSTABLE_childItems} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showDragButtons) {\n        yield {\n          type: 'cell',\n          key: 'header-drag', // this is combined with the row key by CollectionBuilder\n          props: {\n            isDragButtonCell: true\n          }\n        };\n      }\n\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n\n        if (UNSTABLE_childItems) {\n          for (let child of UNSTABLE_childItems) {\n            // Note: in order to reuse the render function of TableBody for our child rows, we just need to yield a type and a value here. CollectionBuilder will then look up\n            // the parent renderer and use that to build the full node of this child row, using the value provided here to generate the cells\n            yield {\n              type: 'item',\n              value: child\n            };\n          }\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        let childRows: PartialNode<T>[] = [];\n        React.Children.forEach(children, node => {\n          if (node.type === Row) {\n            if (cells.length < context.columns.length) {\n              throw new Error('All of a Row\\'s child Cells must be positioned before any child Rows.');\n            }\n\n            childRows.push({\n              type: 'item',\n              element: node\n            });\n          } else {\n            cells.push({\n              type: 'cell',\n              element: node\n            });\n          }\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.showDragButtons !== context.showDragButtons ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as <T>(props: RowProps<T>) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilder} from '@react-stately/collections';\nimport {GridNode} from '@react-types/grid';\nimport {Key, ReactElement, useMemo} from 'react';\nimport {TableCollection} from './TableCollection';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableState, TableStateProps, useTableState} from './useTableState';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeGridState<T> extends TableState<T> {\n  /** A set of keys for items that are expanded. */\n  expandedKeys: 'all' | Set<Key>,\n  /** Toggles the expanded state for a row by its key. */\n  toggleKey(key: Key): void,\n  /** The key map containing nodes representing the collection's tree grid structure. */\n  keyMap: Map<Key, GridNode<T>>,\n  /** The number of leaf columns provided by the user. */\n  userColumnCount: number\n}\n\nexport interface TreeGridStateProps<T> extends Omit<TableStateProps<T>, 'collection'> {\n  /** The currently expanded keys in the collection (controlled). */\n  UNSTABLE_expandedKeys?: 'all' | Iterable<Key>,\n  /** The initial expanded keys in the collection (uncontrolled). */\n  UNSTABLE_defaultExpandedKeys?: 'all' | Iterable<Key>,\n  /** Handler that is called when items are expanded or collapsed. */\n  UNSTABLE_onExpandedChange?: (keys: Set<Key>) => any\n}\n\n/**\n * Provides state management for a tree grid component. Handles building a collection\n * of columns and rows from props. In addition, it tracks and manages expanded rows, row selection, and sort order changes.\n */\nexport function UNSTABLE_useTreeGridState<T extends object>(props: TreeGridStateProps<T>): TreeGridState<T> {\n  let {\n    selectionMode = 'none',\n    showSelectionCheckboxes,\n    showDragButtons,\n    UNSTABLE_expandedKeys: propExpandedKeys,\n    UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys,\n    UNSTABLE_onExpandedChange,\n    children\n  } = props;\n\n  if (!tableNestedRows()) {\n    throw new Error('Feature flag for table nested rows must be enabled to use useTreeGridState.');\n  }\n\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    propExpandedKeys ? convertExpanded(propExpandedKeys) : undefined,\n    propDefaultExpandedKeys ? convertExpanded(propDefaultExpandedKeys) : new Set(),\n    UNSTABLE_onExpandedChange\n  );\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n    showDragButtons: showDragButtons,\n    selectionMode,\n    columns: []\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n\n  let builder = useMemo(() => new CollectionBuilder<T>(), []);\n  let nodes = useMemo(() => builder.build({children: children as ReactElement[]}, context), [builder, children, context]);\n  let treeGridCollection = useMemo(() => {\n    return generateTreeGridCollection<T>(nodes, {showSelectionCheckboxes, showDragButtons, expandedKeys});\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key, treeGridCollection));\n  };\n\n  let collection = useMemo(() => {\n    return new TableCollection(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n\n  let tableState = useTableState({...props, collection});\n  return {\n    ...tableState,\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys,\n    toggleKey: onToggle\n  };\n}\n\nfunction toggleKey<T>(currentExpandedKeys: 'all' | Set<Key>, key: Key, collection: TreeGridCollection<T>): Set<Key> {\n  let updatedExpandedKeys: Set<Key>;\n  if (currentExpandedKeys === 'all') {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(row => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map(row => row.key));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) {\n      updatedExpandedKeys.delete(key);\n    } else {\n      updatedExpandedKeys.add(key);\n    }\n  }\n\n  return updatedExpandedKeys;\n}\n\nfunction convertExpanded(expanded: 'all' | Iterable<Key>): 'all' | Set<Key> {\n  if (!expanded) {\n    return new Set<Key>();\n  }\n\n  return expanded === 'all'\n    ? 'all'\n    : new Set(expanded);\n}\n\ninterface TreeGridCollectionOptions {\n  showSelectionCheckboxes?: boolean,\n  showDragButtons?: boolean,\n  expandedKeys: 'all' | Set<Key>\n}\n\ninterface TreeGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>>,\n  tableNodes: GridNode<T>[],\n  flattenedRows: GridNode<T>[],\n  userColumnCount: number\n}\nfunction generateTreeGridCollection<T>(nodes, opts: TreeGridCollectionOptions): TreeGridCollection<T> {\n  let {\n    expandedKeys = new Set()\n  } = opts;\n\n  let body: GridNode<T>;\n  let flattenedRows = [];\n  let columnCount = 0;\n  let userColumnCount = 0;\n  let originalColumns = [];\n  let keyMap = new Map();\n\n  if (opts?.showSelectionCheckboxes) {\n    columnCount++;\n  }\n\n  if (opts?.showDragButtons) {\n    columnCount++;\n  }\n\n  let topLevelRows = [];\n  let visit = (node: GridNode<T>) => {\n    switch (node.type) {\n      case 'body':\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case 'column':\n        if (!node.hasChildNodes) {\n          userColumnCount++;\n        }\n        break;\n      case 'item':\n        topLevelRows.push(node);\n        return;\n    }\n\n    for (let child of node.childNodes) {\n      visit(child);\n    }\n  };\n\n  for (let node of nodes) {\n    if (node.type === 'column') {\n      originalColumns.push(node);\n    }\n    visit(node);\n  }\n  columnCount += userColumnCount;\n\n  // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n  let globalRowCount = 0;\n  let visitNode = (node: GridNode<T>, i?: number) => {\n    // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n    // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n    // values automatically calculated via CollectionBuilder\n    if (node.type === 'item') {\n      let childNodes = [];\n      for (let child of node.childNodes) {\n        if (child.type === 'cell') {\n          let cellClone = {...child};\n          if (cellClone.index + 1 === columnCount) {\n            cellClone.nextKey = null;\n          }\n          childNodes.push({...cellClone});\n        }\n      }\n      let clone = {...node, childNodes: childNodes, parentKey: body.key, level: 1, index: globalRowCount++};\n      flattenedRows.push(clone);\n    }\n\n    let newProps = {};\n\n    // Assign indexOfType to cells and rows for aria-posinset\n    if (node.type !== 'placeholder' && node.type !== 'column') {\n      newProps['indexOfType'] = i;\n    }\n\n    // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n    // via .childNodes returns the same object as the one found via keyMap look up\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n\n    let lastNode: GridNode<T>;\n    let rowIndex = 0;\n    for (let child of node.childNodes) {\n      if (!(child.type === 'item' && expandedKeys !== 'all' && !expandedKeys.has(node.key))) {\n        if (child.parentKey == null) {\n          // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n\n        if (lastNode) {\n          lastNode.nextKey = child.key;\n          child.prevKey = lastNode.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        if (child.type === 'item') {\n          visitNode(child, rowIndex++);\n        } else {\n          // We enforce that the cells come before rows so can just reuse cell index\n          visitNode(child, child.index);\n        }\n\n        lastNode = child;\n      }\n    }\n\n    if (lastNode) {\n      lastNode.nextKey = null;\n    }\n  };\n\n  let last: GridNode<T>;\n  topLevelRows.forEach((node: GridNode<T>, i) => {\n    visitNode(node as GridNode<T>, i);\n\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else {\n      node.prevKey = null;\n    }\n\n    last = node;\n  });\n\n  if (last) {\n    last.nextKey = null;\n  }\n\n  return {\n    keyMap,\n    userColumnCount,\n    flattenedRows,\n    tableNodes: [...originalColumns, {...body, childNodes: flattenedRows}]\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}